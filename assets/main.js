!function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="./assets/",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=n(1),o=r(i),a=n(3),s=r(a);n(103),new o.default({el:"#body",render:function(t){return t(s.default)}})},function(t,e,n){(function(e,n){/*!
	 * Vue.js v2.1.3
	 * (c) 2014-2016 Evan You
	 * Released under the MIT License.
	 */
"use strict";function r(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function i(t){var e=parseFloat(t,10);return e||0===e?e:t}function o(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}function a(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}function s(t,e){return pn.call(t,e)}function u(t){return"string"==typeof t||"number"==typeof t}function c(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}function l(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function f(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function d(t,e){for(var n in e)t[n]=e[n];return t}function p(t){return null!==t&&"object"==typeof t}function h(t){return _n.call(t)===bn}function v(t){for(var e={},n=0;n<t.length;n++)t[n]&&d(e,t[n]);return e}function m(){}function y(t){return t.reduce(function(t,e){return t.concat(e.staticKeys||[])},[]).join(",")}function g(t,e){return t==e||!(!p(t)||!p(e))&&JSON.stringify(t)===JSON.stringify(e)}function _(t,e){for(var n=0;n<t.length;n++)if(g(t[n],e))return n;return-1}function b(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function w(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function x(t){if(!xn.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}function E(t){return/native code/.test(t.toString())}function k(t){Un.target&&Bn.push(Un.target),Un.target=t}function A(){Un.target=Bn.pop()}function O(t,e){t.__proto__=e}function C(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];w(t,o,e[o])}}function D(t){if(p(t)){var e;return s(t,"__ob__")&&t.__ob__ instanceof Zn?e=t.__ob__:Hn.shouldConvert&&!Fn()&&(Array.isArray(t)||h(t))&&Object.isExtensible(t)&&!t._isVue&&(e=new Zn(t)),e}}function T(t,e,r,i){var o=new Un,a=Object.getOwnPropertyDescriptor(t,e);if(!a||a.configurable!==!1){var s=a&&a.get,u=a&&a.set,c=D(r);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):r;return Un.target&&(o.depend(),c&&c.dep.depend(),Array.isArray(e)&&P(e)),e},set:function(e){var a=s?s.call(t):r;e===a||e!==e&&a!==a||("production"!==n.env.NODE_ENV&&i&&i(),u?u.call(t,e):r=e,c=D(e),o.notify())}})}}function $(t,e,r){if(Array.isArray(t))return t.length=Math.max(t.length,e),t.splice(e,1,r),r;if(s(t,e))return void(t[e]=r);var i=t.__ob__;return t._isVue||i&&i.vmCount?void("production"!==n.env.NODE_ENV&&Rn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.")):i?(T(i.value,e,r),i.dep.notify(),r):void(t[e]=r)}function F(t,e){var r=t.__ob__;return t._isVue||r&&r.vmCount?void("production"!==n.env.NODE_ENV&&Rn("Avoid deleting properties on a Vue instance or its root $data - just set it to null.")):void(s(t,e)&&(delete t[e],r&&r.dep.notify()))}function P(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&P(e)}function S(t,e){if(!e)return t;for(var n,r,i,o=Object.keys(e),a=0;a<o.length;a++)n=o[a],r=t[n],i=e[n],s(t,n)?h(r)&&h(i)&&S(r,i):$(t,n,i);return t}function N(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function j(t,e){var n=Object.create(t||null);return e?d(n,e):n}function R(t){for(var e in t.components){var n=e.toLowerCase();(dn(n)||jn.isReservedTag(n))&&Rn("Do not use built-in or reserved HTML elements as component id: "+e)}}function L(t){var e=t.props;if(e){var r,i,o,a={};if(Array.isArray(e))for(r=e.length;r--;)i=e[r],"string"==typeof i?(o=vn(i),a[o]={type:null}):"production"!==n.env.NODE_ENV&&Rn("props must be strings when using array syntax.");else if(h(e))for(var s in e)i=e[s],o=vn(s),a[o]=h(i)?i:{type:i};t.props=a}}function I(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}function M(t,e,r){function i(n){var i=qn[n]||Gn;f[n]=i(t[n],e[n],r,n)}"production"!==n.env.NODE_ENV&&R(e),L(e),I(e);var o=e.extends;if(o&&(t="function"==typeof o?M(t,o.options,r):M(t,o,r)),e.mixins)for(var a=0,u=e.mixins.length;a<u;a++){var c=e.mixins[a];c.prototype instanceof zt&&(c=c.options),t=M(t,c,r)}var l,f={};for(l in t)i(l);for(l in e)s(t,l)||i(l);return f}function U(t,e,r,i){if("string"==typeof r){var o=t[e],a=o[r]||o[vn(r)]||o[mn(vn(r))];return"production"!==n.env.NODE_ENV&&i&&!a&&Rn("Failed to resolve "+e.slice(0,-1)+": "+r,t),a}}function B(t,e,r,i){var o=e[t],a=!s(r,t),u=r[t];if(Z(o.type)&&(a&&!s(o,"default")?u=!1:""!==u&&u!==gn(t)||(u=!0)),void 0===u){u=V(i,o,t);var c=Hn.shouldConvert;Hn.shouldConvert=!0,D(u),Hn.shouldConvert=c}return"production"!==n.env.NODE_ENV&&z(o,t,u,i,a),u}function V(t,e,r){if(s(e,"default")){var i=e.default;return p(i)&&"production"!==n.env.NODE_ENV&&Rn('Invalid default value for prop "'+r+'": Props with type Object/Array must use a factory function to return the default value.',t),t&&t.$options.propsData&&void 0===t.$options.propsData[r]&&void 0!==t[r]?t[r]:"function"==typeof i&&e.type!==Function?i.call(t):i}}function z(t,e,n,r,i){if(t.required&&i)return void Rn('Missing required prop: "'+e+'"',r);if(null!=n||t.required){var o=t.type,a=!o||o===!0,s=[];if(o){Array.isArray(o)||(o=[o]);for(var u=0;u<o.length&&!a;u++){var c=Y(n,o[u]);s.push(c.expectedType),a=c.valid}}if(!a)return void Rn('Invalid prop: type check failed for prop "'+e+'". Expected '+s.map(mn).join(", ")+", got "+Object.prototype.toString.call(n).slice(8,-1)+".",r);var l=t.validator;l&&(l(n)||Rn('Invalid prop: custom validator check failed for prop "'+e+'".',r))}}function Y(t,e){var n,r=H(e);return n="String"===r?typeof t==(r="string"):"Number"===r?typeof t==(r="number"):"Boolean"===r?typeof t==(r="boolean"):"Function"===r?typeof t==(r="function"):"Object"===r?h(t):"Array"===r?Array.isArray(t):t instanceof e,{valid:n,expectedType:r}}function H(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e&&e[1]}function Z(t){if(!Array.isArray(t))return"Boolean"===H(t);for(var e=0,n=t.length;e<n;e++)if("Boolean"===H(t[e]))return!0;return!1}function q(){nr.length=0,rr={},"production"!==n.env.NODE_ENV&&(ir={}),or=ar=!1}function W(){for(ar=!0,nr.sort(function(t,e){return t.id-e.id}),sr=0;sr<nr.length;sr++){var t=nr[sr],e=t.id;if(rr[e]=null,t.run(),"production"!==n.env.NODE_ENV&&null!=rr[e]&&(ir[e]=(ir[e]||0)+1,ir[e]>jn._maxUpdateCount)){Rn("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}}Pn&&jn.devtools&&Pn.emit("flush"),q()}function G(t){var e=t.id;if(null==rr[e]){if(rr[e]=!0,ar){for(var n=nr.length-1;n>=0&&nr[n].id>t.id;)n--;nr.splice(Math.max(n,sr)+1,0,t)}else nr.push(t);or||(or=!0,Sn(W))}}function X(t){lr.clear(),K(t,lr)}function K(t,e){var n,r,i=Array.isArray(t);if((i||p(t))&&Object.isExtensible(t)){if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(i)for(n=t.length;n--;)K(t[n],e);else for(r=Object.keys(t),n=r.length;n--;)K(t[r[n]],e)}}function J(t){t._watchers=[],Q(t),tt(t),et(t),rt(t),it(t)}function Q(t){var e=t.$options.props;if(e){var r=t.$options.propsData||{},i=t.$options._propKeys=Object.keys(e),o=!t.$parent;Hn.shouldConvert=o;for(var a=function(o){var a=i[o];"production"!==n.env.NODE_ENV?(fr(a)&&Rn('"'+a+'" is a reserved attribute and cannot be used as component prop.',t),T(t,a,B(a,e,r,t),function(){t.$parent&&!Hn.isSettingProps&&Rn("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)})):T(t,a,B(a,e,r,t))},s=0;s<i.length;s++)a(s);Hn.shouldConvert=!0}}function tt(t){var e=t.$options.data;e=t._data="function"==typeof e?e.call(t):e||{},h(e)||(e={},"production"!==n.env.NODE_ENV&&Rn("data functions should return an object.",t));for(var r=Object.keys(e),i=t.$options.props,o=r.length;o--;)i&&s(i,r[o])?"production"!==n.env.NODE_ENV&&Rn('The data property "'+r[o]+'" is already declared as a prop. Use prop default value instead.',t):st(t,r[o]);D(e),e.__ob__&&e.__ob__.vmCount++}function et(t){var e=t.$options.computed;if(e)for(var n in e){var r=e[n];"function"==typeof r?(dr.get=nt(r,t),dr.set=m):(dr.get=r.get?r.cache!==!1?nt(r.get,t):l(r.get,t):m,dr.set=r.set?l(r.set,t):m),Object.defineProperty(t,n,dr)}}function nt(t,e){var n=new cr(e,t,m,{lazy:!0});return function(){return n.dirty&&n.evaluate(),Un.target&&n.depend(),n.value}}function rt(t){var e=t.$options.methods;if(e)for(var r in e)t[r]=null==e[r]?m:l(e[r],t),"production"!==n.env.NODE_ENV&&null==e[r]&&Rn('method "'+r+'" has an undefined value in the component definition. Did you reference the function correctly?',t)}function it(t){var e=t.$options.watch;if(e)for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)ot(t,n,r[i]);else ot(t,n,r)}}function ot(t,e,n){var r;h(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function at(t){var e={};e.get=function(){return this._data},"production"!==n.env.NODE_ENV&&(e.set=function(t){Rn("Avoid replacing instance root $data. Use nested data properties instead.",this)}),Object.defineProperty(t.prototype,"$data",e),t.prototype.$set=$,t.prototype.$delete=F,t.prototype.$watch=function(t,e,n){var r=this;n=n||{},n.user=!0;var i=new cr(r,t,e,n);return n.immediate&&e.call(r,i.value),function(){i.teardown()}}}function st(t,e){b(e)||Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return t._data[e]},set:function(n){t._data[e]=n}})}function ut(t){var e=new pr(t.tag,t.data,t.children,t.text,t.elm,t.ns,t.context,t.componentOptions);return e.isStatic=t.isStatic,e.key=t.key,e.isCloned=!0,e}function ct(t){for(var e=new Array(t.length),n=0;n<t.length;n++)e[n]=ut(t[n]);return e}function lt(t,e,n,r){r+=e;var i=t.__injected||(t.__injected={});if(!i[r]){i[r]=!0;var o=t[e];o?t[e]=function(){o.apply(this,arguments),n.apply(this,arguments)}:t[e]=n}}function ft(t,e,r,i,o){var a,s,u,c,l,f;for(a in t)if(s=t[a],u=e[a],s)if(u){if(s!==u)if(Array.isArray(u)){u.length=s.length;for(var d=0;d<u.length;d++)u[d]=s[d];t[a]=u}else u.fn=s,t[a]=u}else f="!"===a.charAt(0),l=f?a.slice(1):a,Array.isArray(s)?r(l,s.invoker=dt(s),f):(s.invoker||(c=s,s=t[a]={},s.fn=c,s.invoker=pt(s)),r(l,s.invoker,f));else"production"!==n.env.NODE_ENV&&Rn('Invalid handler for event "'+a+'": got '+String(s),o);for(a in e)t[a]||(l="!"===a.charAt(0)?a.slice(1):a,i(l,e[a].invoker))}function dt(t){return function(e){for(var n=arguments,r=1===arguments.length,i=0;i<t.length;i++)r?t[i](e):t[i].apply(null,n)}}function pt(t){return function(e){var n=1===arguments.length;n?t.fn(e):t.fn.apply(null,arguments)}}function ht(t,e,n){if(u(t))return[vt(t)];if(Array.isArray(t)){for(var r=[],i=0,o=t.length;i<o;i++){var a=t[i],s=r[r.length-1];Array.isArray(a)?r.push.apply(r,ht(a,e,(n||"")+"_"+i)):u(a)?s&&s.text?s.text+=String(a):""!==a&&r.push(vt(a)):a instanceof pr&&(a.text&&s&&s.text?s.isCloned||(s.text+=a.text):(e&&mt(a,e),a.tag&&null==a.key&&null!=n&&(a.key="__vlist"+n+"_"+i+"__"),r.push(a)))}return r}}function vt(t){return new pr(void 0,void 0,void 0,String(t))}function mt(t,e){if(t.tag&&!t.ns&&(t.ns=e,t.children))for(var n=0,r=t.children.length;n<r;n++)mt(t.children[n],e)}function yt(t){return t&&t.filter(function(t){return t&&t.componentOptions})[0]}function gt(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function _t(t){t.prototype._mount=function(t,e){var r=this;return r.$el=t,r.$options.render||(r.$options.render=hr,"production"!==n.env.NODE_ENV&&(r.$options.template&&"#"!==r.$options.template.charAt(0)?Rn("You are using the runtime-only build of Vue where the template option is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",r):Rn("Failed to mount component: template or render function not defined.",r))),bt(r,"beforeMount"),r._watcher=new cr(r,function(){r._update(r._render(),e)},m),e=!1,null==r.$vnode&&(r._isMounted=!0,bt(r,"mounted")),r},t.prototype._update=function(t,e){var n=this;n._isMounted&&bt(n,"beforeUpdate");var r=n.$el,i=vr;vr=n;var o=n._vnode;n._vnode=t,o?n.$el=n.__patch__(o,t):n.$el=n.__patch__(n.$el,t,e),vr=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el),n._isMounted&&bt(n,"updated")},t.prototype._updateFromParent=function(t,e,r,i){var o=this,a=!(!o.$options._renderChildren&&!i);if(o.$options._parentVnode=r,o.$vnode=r,o._vnode&&(o._vnode.parent=r),o.$options._renderChildren=i,t&&o.$options.props){Hn.shouldConvert=!1,"production"!==n.env.NODE_ENV&&(Hn.isSettingProps=!0);for(var s=o.$options._propKeys||[],u=0;u<s.length;u++){var c=s[u];o[c]=B(c,o.$options.props,t,o)}Hn.shouldConvert=!0,"production"!==n.env.NODE_ENV&&(Hn.isSettingProps=!1),o.$options.propsData=t}if(e){var l=o.$options._parentListeners;o.$options._parentListeners=e,o._updateListeners(e,l)}a&&(o.$slots=Lt(i,o._renderContext),o.$forceUpdate())},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){bt(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||a(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,bt(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.__patch__(t._vnode,null)}}}function bt(t,e){var n=t.$options[e];if(n)for(var r=0,i=n.length;r<i;r++)n[r].call(t);t.$emit("hook:"+e)}function wt(t,e,r,i,o){if(t){var a=r.$options._base;if(p(t)&&(t=a.extend(t)),"function"!=typeof t)return void("production"!==n.env.NODE_ENV&&Rn("Invalid Component definition: "+String(t),r));if(!t.cid)if(t.resolved)t=t.resolved;else if(t=Dt(t,a,function(){r.$forceUpdate()}),!t)return;Vt(t),e=e||{};var s=Tt(e,t);if(t.options.functional)return xt(t,s,e,r,i);var u=e.on;e.on=e.nativeOn,t.options.abstract&&(e={}),Ft(e);var c=t.options.name||o,l=new pr("vue-component-"+t.cid+(c?"-"+c:""),e,void 0,void 0,void 0,void 0,r,{Ctor:t,propsData:s,listeners:u,tag:o,children:i});return l}}function xt(t,e,n,r,i){var o={},a=t.options.props;if(a)for(var s in a)o[s]=B(s,a,e);var u=t.options.render.call(null,l(St,{_self:Object.create(r)}),{props:o,data:n,parent:r,children:ht(i),slots:function(){return Lt(i,r)}});return u instanceof pr&&(u.functionalContext=r,n.slot&&((u.data||(u.data={})).slot=n.slot)),u}function Et(t,e){var n=t.componentOptions,r={_isComponent:!0,parent:e,propsData:n.propsData,_componentTag:n.tag,_parentVnode:t,_parentListeners:n.listeners,_renderChildren:n.children},i=t.data.inlineTemplate;return i&&(r.render=i.render,r.staticRenderFns=i.staticRenderFns),new n.Ctor(r)}function kt(t,e){if(!t.child||t.child._isDestroyed){var n=t.child=Et(t,vr);n.$mount(e?t.elm:void 0,e)}else if(t.data.keepAlive){var r=t;At(r,r)}}function At(t,e){var n=e.componentOptions,r=e.child=t.child;r._updateFromParent(n.propsData,n.listeners,e,n.children)}function Ot(t){t.child._isMounted||(t.child._isMounted=!0,bt(t.child,"mounted")),t.data.keepAlive&&(t.child._inactive=!1,bt(t.child,"activated"))}function Ct(t){t.child._isDestroyed||(t.data.keepAlive?(t.child._inactive=!0,bt(t.child,"deactivated")):t.child.$destroy())}function Dt(t,e,r){if(!t.requested){t.requested=!0;var i=t.pendingCallbacks=[r],o=!0,a=function(n){if(p(n)&&(n=e.extend(n)),t.resolved=n,!o)for(var r=0,a=i.length;r<a;r++)i[r](n)},s=function(e){"production"!==n.env.NODE_ENV&&Rn("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:""))},u=t(a,s);return u&&"function"==typeof u.then&&!t.resolved&&u.then(a,s),o=!1,t.resolved}t.pendingCallbacks.push(r)}function Tt(t,e){var n=e.options.props;if(n){var r={},i=t.attrs,o=t.props,a=t.domProps;if(i||o||a)for(var s in n){var u=gn(s);$t(r,o,s,u,!0)||$t(r,i,s,u)||$t(r,a,s,u)}return r}}function $t(t,e,n,r,i){if(e){if(s(e,n))return t[n]=e[n],i||delete e[n],!0;if(s(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Ft(t){t.hook||(t.hook={});for(var e=0;e<yr.length;e++){var n=yr[e],r=t.hook[n],i=mr[n];t.hook[n]=r?Pt(i,r):i}}function Pt(t,e){return function(n,r){t(n,r),e(n,r)}}function St(t,e,n){return e&&(Array.isArray(e)||"object"!=typeof e)&&(n=e,e=void 0),Nt(this._self,t,e,n)}function Nt(t,e,r,i){if(r&&r.__ob__)return void("production"!==n.env.NODE_ENV&&Rn("Avoid using observed data object as vnode data: "+JSON.stringify(r)+"\nAlways create fresh vnode data objects in each render!",t));if(!e)return hr();if(Array.isArray(i)&&"function"==typeof i[0]&&(r=r||{},r.scopedSlots={default:i[0]},i.length=0),"string"==typeof e){var o,a=jn.getTagNamespace(e);if(jn.isReservedTag(e))return new pr(e,r,ht(i,a),void 0,void 0,a,t);if(o=U(t.$options,"components",e))return wt(o,r,t,i,e);var s="foreignObject"===e?"xhtml":a;return new pr(e,r,ht(i,s),void 0,void 0,a,t)}return wt(e,r,t,i)}function jt(t){t.$vnode=null,t._vnode=null,t._staticTrees=null,t._renderContext=t.$options._parentVnode&&t.$options._parentVnode.context,t.$slots=Lt(t.$options._renderChildren,t._renderContext),t.$scopedSlots={},t.$createElement=l(St,t),t.$options.el&&t.$mount(t.$options.el)}function Rt(t){function e(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&o(t[r],e+"_"+r,n);else o(t,e,n)}function o(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}t.prototype.$nextTick=function(t){return Sn(t,this)},t.prototype._render=function(){var t=this,e=t.$options,r=e.render,i=e.staticRenderFns,o=e._parentVnode;if(t._isMounted)for(var a in t.$slots)t.$slots[a]=ct(t.$slots[a]);o&&o.data.scopedSlots&&(t.$scopedSlots=o.data.scopedSlots),i&&!t._staticTrees&&(t._staticTrees=[]),t.$vnode=o;var s;try{s=r.call(t._renderProxy,t.$createElement)}catch(e){if("production"!==n.env.NODE_ENV&&Rn("Error when rendering "+Nn(t)+":"),jn.errorHandler)jn.errorHandler.call(null,e,t);else{if(Fn())throw e;console.error(e)}s=t._vnode}return s instanceof pr||("production"!==n.env.NODE_ENV&&Array.isArray(s)&&Rn("Multiple root nodes returned from render function. Render function should return a single root node.",t),s=hr()),s.parent=o,s},t.prototype._h=St,t.prototype._s=r,t.prototype._n=i,t.prototype._e=hr,t.prototype._q=g,t.prototype._i=_,t.prototype._m=function(t,n){var r=this._staticTrees[t];return r&&!n?Array.isArray(r)?ct(r):ut(r):(r=this._staticTrees[t]=this.$options.staticRenderFns[t].call(this._renderProxy),e(r,"__static__"+t,!1),r)},t.prototype._o=function(t,n,r){return e(t,"__once__"+n+(r?"_"+r:""),!0),t};var a=function(t){return t};t.prototype._f=function(t){return U(this.$options,"filters",t,!0)||a},t.prototype._l=function(t,e){var n,r,i,o,a;if(Array.isArray(t))for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(p(t))for(o=Object.keys(t),n=new Array(o.length),r=0,i=o.length;r<i;r++)a=o[r],n[r]=e(t[a],a,r);return n},t.prototype._t=function(t,e,r){var i=this.$scopedSlots[t];if(i)return i(r||{})||e;var o=this.$slots[t];return o&&"production"!==n.env.NODE_ENV&&(o._rendered&&Rn('Duplicate presence of slot "'+t+'" found in the same render tree - this will likely cause render errors.',this),o._rendered=!0),o||e},t.prototype._b=function(t,e,r,i){if(r)if(p(r)){Array.isArray(r)&&(r=v(r));for(var o in r)if("class"===o||"style"===o)t[o]=r[o];else{var a=i||jn.mustUseProp(e,o)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={});a[o]=r[o]}}else"production"!==n.env.NODE_ENV&&Rn("v-bind without argument expects an Object or Array value",this);return t},t.prototype._k=function(t){return jn.keyCodes[t]}}function Lt(t,e){var n={};if(!t)return n;for(var r,i,o=ht(t)||[],a=[],s=0,u=o.length;s<u;s++)if(i=o[s],(i.context===e||i.functionalContext===e)&&i.data&&(r=i.data.slot)){var c=n[r]||(n[r]=[]);"template"===i.tag?c.push.apply(c,i.children):c.push(i)}else a.push(i);return a.length&&(1!==a.length||" "!==a[0].text&&!a[0].isComment)&&(n.default=a),n}function It(t){t._events=Object.create(null);var e=t.$options._parentListeners,n=l(t.$on,t),r=l(t.$off,t);t._updateListeners=function(e,i){ft(e,i||{},n,r,t)},e&&t._updateListeners(e)}function Mt(t){t.prototype.$on=function(t,e){var n=this;return(n._events[t]||(n._events[t]=[])).push(e),n},t.prototype.$once=function(t,e){function n(){r.$off(t,n),e.apply(r,arguments)}var r=this;return n.fn=e,r.$on(t,n),r},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;var r=n._events[t];if(!r)return n;if(1===arguments.length)return n._events[t]=null,n;for(var i,o=r.length;o--;)if(i=r[o],i===e||i.fn===e){r.splice(o,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?f(n):n;for(var r=f(arguments,1),i=0,o=n.length;i<o;i++)n[i].apply(e,r)}return e}}function Ut(t){t.prototype._init=function(t){var e=this;e._uid=gr++,e._isVue=!0,t&&t._isComponent?Bt(e,t):e.$options=M(Vt(e.constructor),t||{},e),"production"!==n.env.NODE_ENV?Wn(e):e._renderProxy=e,e._self=e,gt(e),It(e),bt(e,"beforeCreate"),J(e),bt(e,"created"),jt(e)}}function Bt(t,e){var n=t.$options=Object.create(t.constructor.options);n.parent=e.parent,n.propsData=e.propsData,n._parentVnode=e._parentVnode,n._parentListeners=e._parentListeners,n._renderChildren=e._renderChildren,n._componentTag=e._componentTag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function Vt(t){var e=t.options;if(t.super){var n=t.super.options,r=t.superOptions,i=t.extendOptions;n!==r&&(t.superOptions=n,i.render=e.render,i.staticRenderFns=e.staticRenderFns,i._scopeId=e._scopeId,e=t.options=M(n,i),e.name&&(e.components[e.name]=t))}return e}function zt(t){"production"===n.env.NODE_ENV||this instanceof zt||Rn("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function Yt(t){t.use=function(t){if(!t.installed){var e=f(arguments,1);return e.unshift(this),"function"==typeof t.install?t.install.apply(t,e):t.apply(null,e),t.installed=!0,this}}}function Ht(t){t.mixin=function(t){this.options=M(this.options,t)}}function Zt(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var r=this,i=r.cid,o=t._Ctor||(t._Ctor={});if(o[i])return o[i];var a=t.name||r.options.name;"production"!==n.env.NODE_ENV&&(/^[a-zA-Z][\w-]*$/.test(a)||Rn('Invalid component name: "'+a+'". Component names can only contain alphanumeric characaters and the hyphen.'));var s=function(t){this._init(t)};return s.prototype=Object.create(r.prototype),s.prototype.constructor=s,s.cid=e++,s.options=M(r.options,t),s.super=r,s.extend=r.extend,s.mixin=r.mixin,s.use=r.use,jn._assetTypes.forEach(function(t){s[t]=r[t]}),a&&(s.options.components[a]=s),s.superOptions=r.options,s.extendOptions=t,o[i]=s,s}}function qt(t){jn._assetTypes.forEach(function(e){t[e]=function(t,r){return r?("production"!==n.env.NODE_ENV&&"component"===e&&jn.isReservedTag(t)&&Rn("Do not use built-in or reserved HTML elements as component id: "+t),"component"===e&&h(r)&&(r.name=r.name||t,r=this.options._base.extend(r)),"directive"===e&&"function"==typeof r&&(r={bind:r,update:r}),this.options[e+"s"][t]=r,r):this.options[e+"s"][t]}})}function Wt(t,e){return"string"==typeof t?t.split(",").indexOf(e)>-1:t.test(e)}function Gt(t){var e={};e.get=function(){return jn},"production"!==n.env.NODE_ENV&&(e.set=function(){Rn("Do not replace the Vue.config object, set individual fields instead.")}),Object.defineProperty(t,"config",e),t.util=Xn,t.set=$,t.delete=F,t.nextTick=Sn,t.options=Object.create(null),jn._assetTypes.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,d(t.options.components,wr),Yt(t),Ht(t),Zt(t),qt(t)}function Xt(t){for(var e=t.data,n=t,r=t;r.child;)r=r.child._vnode,r.data&&(e=Kt(r.data,e));for(;n=n.parent;)n.data&&(e=Kt(e,n.data));return Jt(e)}function Kt(t,e){return{staticClass:Qt(t.staticClass,e.staticClass),class:t.class?[t.class,e.class]:e.class}}function Jt(t){var e=t.class,n=t.staticClass;return n||e?Qt(n,te(e)):""}function Qt(t,e){return t?e?t+" "+e:t:e||""}function te(t){var e="";if(!t)return e;if("string"==typeof t)return t;if(Array.isArray(t)){for(var n,r=0,i=t.length;r<i;r++)t[r]&&(n=te(t[r]))&&(e+=n+" ");return e.slice(0,-1)}if(p(t)){for(var o in t)t[o]&&(e+=o+" ");return e.slice(0,-1)}return e}function ee(t){return Pr(t)?"svg":"math"===t?"math":void 0}function ne(t){if(!kn)return!0;if(Sr(t))return!1;if(t=t.toLowerCase(),null!=Nr[t])return Nr[t];var e=document.createElement(t);return t.indexOf("-")>-1?Nr[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Nr[t]=/HTMLUnknownElement/.test(e.toString())}function re(t){if("string"==typeof t){var e=t;if(t=document.querySelector(t),!t)return"production"!==n.env.NODE_ENV&&Rn("Cannot find element: "+e),document.createElement("div")}return t}function ie(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&"multiple"in e.data.attrs&&n.setAttribute("multiple","multiple"),n)}function oe(t,e){return document.createElementNS($r[t],e)}function ae(t){return document.createTextNode(t)}function se(t){return document.createComment(t)}function ue(t,e,n){t.insertBefore(e,n)}function ce(t,e){t.removeChild(e)}function le(t,e){t.appendChild(e)}function fe(t){return t.parentNode}function de(t){return t.nextSibling}function pe(t){return t.tagName}function he(t,e){t.textContent=e}function ve(t){return t.childNodes}function me(t,e,n){t.setAttribute(e,n)}function ye(t,e){var n=t.data.ref;if(n){var r=t.context,i=t.child||t.elm,o=r.$refs;e?Array.isArray(o[n])?a(o[n],i):o[n]===i&&(o[n]=void 0):t.data.refInFor?Array.isArray(o[n])&&o[n].indexOf(i)<0?o[n].push(i):o[n]=[i]:o[n]=i}}function ge(t){return null==t}function _e(t){return null!=t}function be(t,e){return t.key===e.key&&t.tag===e.tag&&t.isComment===e.isComment&&!t.data==!e.data}function we(t,e,n){var r,i,o={};for(r=e;r<=n;++r)i=t[r].key,_e(i)&&(o[i]=r);return o}function xe(t){function e(t){return new pr(O.tagName(t).toLowerCase(),{},[],void 0,t)}function i(t,e){function n(){0===--n.listeners&&o(t)}return n.listeners=e,n}function o(t){var e=O.parentNode(t);e&&O.removeChild(e,t)}function a(t,e,r){var i,o=t.data;if(t.isRootInsert=!r,_e(o)&&(_e(i=o.hook)&&_e(i=i.init)&&i(t),_e(i=t.child)))return f(t,e),t.elm;var a=t.children,u=t.tag;return _e(u)?("production"!==n.env.NODE_ENV&&(t.ns||jn.ignoredElements&&jn.ignoredElements.indexOf(u)>-1||!jn.isUnknownElement(u)||Rn("Unknown custom element: <"+u+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',t.context)),t.elm=t.ns?O.createElementNS(t.ns,u):O.createElement(u,t),d(t),s(t,a,e),_e(o)&&l(t,e)):t.isComment?t.elm=O.createComment(t.text):t.elm=O.createTextNode(t.text),t.elm}function s(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)O.appendChild(t.elm,a(e[r],n,!0));else u(t.text)&&O.appendChild(t.elm,O.createTextNode(t.text))}function c(t){for(;t.child;)t=t.child._vnode;return _e(t.tag)}function l(t,e){for(var n=0;n<k.create.length;++n)k.create[n](Lr,t);x=t.data.hook,_e(x)&&(x.create&&x.create(Lr,t),x.insert&&e.push(t))}function f(t,e){t.data.pendingInsert&&e.push.apply(e,t.data.pendingInsert),t.elm=t.child.$el,c(t)?(l(t,e),d(t)):(ye(t),e.push(t))}function d(t){var e;_e(e=t.context)&&_e(e=e.$options._scopeId)&&O.setAttribute(t.elm,e,""),_e(e=vr)&&e!==t.context&&_e(e=e.$options._scopeId)&&O.setAttribute(t.elm,e,"")}function p(t,e,n,r,i,o){for(;r<=i;++r)O.insertBefore(t,a(n[r],o),e)}function h(t){var e,n,r=t.data;if(_e(r))for(_e(e=r.hook)&&_e(e=e.destroy)&&e(t),e=0;e<k.destroy.length;++e)k.destroy[e](t);if(_e(e=t.children))for(n=0;n<t.children.length;++n)h(t.children[n])}function v(t,e,n,r){for(;n<=r;++n){var i=e[n];_e(i)&&(_e(i.tag)?(m(i),h(i)):O.removeChild(t,i.elm))}}function m(t,e){if(e||_e(t.data)){var n=k.remove.length+1;for(e?e.listeners+=n:e=i(t.elm,n),_e(x=t.child)&&_e(x=x._vnode)&&_e(x.data)&&m(x,e),x=0;x<k.remove.length;++x)k.remove[x](t,e);_e(x=t.data.hook)&&_e(x=x.remove)?x(t,e):e()}else o(t.elm)}function y(t,e,r,i,o){for(var s,u,c,l,f=0,d=0,h=e.length-1,m=e[0],y=e[h],_=r.length-1,b=r[0],w=r[_],x=!o;f<=h&&d<=_;)ge(m)?m=e[++f]:ge(y)?y=e[--h]:be(m,b)?(g(m,b,i),m=e[++f],b=r[++d]):be(y,w)?(g(y,w,i),y=e[--h],w=r[--_]):be(m,w)?(g(m,w,i),x&&O.insertBefore(t,m.elm,O.nextSibling(y.elm)),m=e[++f],w=r[--_]):be(y,b)?(g(y,b,i),x&&O.insertBefore(t,y.elm,m.elm),y=e[--h],b=r[++d]):(ge(s)&&(s=we(e,f,h)),u=_e(b.key)?s[b.key]:null,ge(u)?(O.insertBefore(t,a(b,i),m.elm),b=r[++d]):(c=e[u],"production"===n.env.NODE_ENV||c||Rn("It seems there are duplicate keys that is causing an update error. Make sure each v-for item has a unique key."),c.tag!==b.tag?(O.insertBefore(t,a(b,i),m.elm),b=r[++d]):(g(c,b,i),e[u]=void 0,x&&O.insertBefore(t,b.elm,m.elm),b=r[++d])));f>h?(l=ge(r[_+1])?null:r[_+1].elm,p(t,l,r,d,_,i)):d>_&&v(t,e,f,h)}function g(t,e,n,r){if(t!==e){if(e.isStatic&&t.isStatic&&e.key===t.key&&(e.isCloned||e.isOnce))return e.elm=t.elm,void(e.child=t.child);var i,o=e.data,a=_e(o);a&&_e(i=o.hook)&&_e(i=i.prepatch)&&i(t,e);var s=e.elm=t.elm,u=t.children,l=e.children;if(a&&c(e)){for(i=0;i<k.update.length;++i)k.update[i](t,e);_e(i=o.hook)&&_e(i=i.update)&&i(t,e)}ge(e.text)?_e(u)&&_e(l)?u!==l&&y(s,u,l,n,r):_e(l)?(_e(t.text)&&O.setTextContent(s,""),p(s,null,l,0,l.length-1,n)):_e(u)?v(s,u,0,u.length-1):_e(t.text)&&O.setTextContent(s,""):t.text!==e.text&&O.setTextContent(s,e.text),a&&_e(i=o.hook)&&_e(i=i.postpatch)&&i(t,e)}}function _(t,e,n){if(n&&t.parent)t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}function b(t,e,r){if("production"!==n.env.NODE_ENV&&!w(t,e))return!1;e.elm=t;var i=e.tag,o=e.data,a=e.children;if(_e(o)&&(_e(x=o.hook)&&_e(x=x.init)&&x(e,!0),_e(x=e.child)))return f(e,r),!0;if(_e(i)){if(_e(a)){var u=O.childNodes(t);if(u.length){var c=!0;if(u.length!==a.length)c=!1;else for(var d=0;d<a.length;d++)if(!b(u[d],a[d],r)){c=!1;break}if(!c)return"production"===n.env.NODE_ENV||"undefined"==typeof console||C||(C=!0,console.warn("Parent: ",t),console.warn("Mismatching childNodes vs. VNodes: ",u,a)),!1}else s(e,a,r)}_e(o)&&l(e,r)}return!0}function w(t,e){return e.tag?0===e.tag.indexOf("vue-component")||e.tag.toLowerCase()===O.tagName(t).toLowerCase():r(e.text)===t.data}var x,E,k={},A=t.modules,O=t.nodeOps;for(x=0;x<Ir.length;++x)for(k[Ir[x]]=[],E=0;E<A.length;++E)void 0!==A[E][Ir[x]]&&k[Ir[x]].push(A[E][Ir[x]]);var C=!1;return function(t,r,i,o){if(!r)return void(t&&h(t));var s,u,l=!1,f=[];if(t){var d=_e(t.nodeType);if(!d&&be(t,r))g(t,r,f,o);else{if(d){if(1===t.nodeType&&t.hasAttribute("server-rendered")&&(t.removeAttribute("server-rendered"),i=!0),i){if(b(t,r,f))return _(r,f,!0),t;"production"!==n.env.NODE_ENV&&Rn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}t=e(t)}if(s=t.elm,u=O.parentNode(s),a(r,f),r.parent){for(var p=r.parent;p;)p.elm=r.elm,p=p.parent;if(c(r))for(var m=0;m<k.create.length;++m)k.create[m](Lr,r.parent)}null!==u?(O.insertBefore(u,r.elm,O.nextSibling(s)),v(u,[t],0,0)):_e(t.tag)&&h(t)}}else l=!0,a(r,f);return _(r,f,l),r.elm}}function Ee(t,e){if(t.data.directives||e.data.directives){var n,r,i,o=t===Lr,a=ke(t.data.directives,t.context),s=ke(e.data.directives,e.context),u=[],c=[];for(n in s)r=a[n],i=s[n],r?(i.oldValue=r.value,Oe(i,"update",e,t),i.def&&i.def.componentUpdated&&c.push(i)):(Oe(i,"bind",e,t),i.def&&i.def.inserted&&u.push(i));if(u.length){var l=function(){u.forEach(function(n){Oe(n,"inserted",e,t)})};o?lt(e.data.hook||(e.data.hook={}),"insert",l,"dir-insert"):l()}if(c.length&&lt(e.data.hook||(e.data.hook={}),"postpatch",function(){
c.forEach(function(n){Oe(n,"componentUpdated",e,t)})},"dir-postpatch"),!o)for(n in a)s[n]||Oe(a[n],"unbind",t)}}function ke(t,e){var n=Object.create(null);if(!t)return n;var r,i;for(r=0;r<t.length;r++)i=t[r],i.modifiers||(i.modifiers=Ur),n[Ae(i)]=i,i.def=U(e.$options,"directives",i.name,!0);return n}function Ae(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Oe(t,e,n,r){var i=t.def&&t.def[e];i&&i(n.elm,t,n,r)}function Ce(t,e){if(t.data.attrs||e.data.attrs){var n,r,i,o=e.elm,a=t.data.attrs||{},s=e.data.attrs||{};s.__ob__&&(s=e.data.attrs=d({},s));for(n in s)r=s[n],i=a[n],i!==r&&De(o,n,r);for(n in a)null==s[n]&&(Cr(n)?o.removeAttributeNS(Or,Dr(n)):kr(n)||o.removeAttribute(n))}}function De(t,e,n){Ar(e)?Tr(n)?t.removeAttribute(e):t.setAttribute(e,e):kr(e)?t.setAttribute(e,Tr(n)||"false"===n?"false":"true"):Cr(e)?Tr(n)?t.removeAttributeNS(Or,Dr(e)):t.setAttributeNS(Or,e,n):Tr(n)?t.removeAttribute(e):t.setAttribute(e,n)}function Te(t,e){var n=e.elm,r=e.data,i=t.data;if(r.staticClass||r.class||i&&(i.staticClass||i.class)){var o=Xt(e),a=n._transitionClasses;a&&(o=Qt(o,te(a))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}function $e(t,e){if(t.data.on||e.data.on){var n=e.data.on||{},r=t.data.on||{},i=e.elm._v_add||(e.elm._v_add=function(t,n,r){e.elm.addEventListener(t,n,r)}),o=e.elm._v_remove||(e.elm._v_remove=function(t,n){e.elm.removeEventListener(t,n)});ft(n,r,i,o,e.context)}}function Fe(t,e){if(t.data.domProps||e.data.domProps){var n,r,i=e.elm,o=t.data.domProps||{},a=e.data.domProps||{};a.__ob__&&(a=e.data.domProps=d({},a));for(n in o)null==a[n]&&(i[n]="");for(n in a)if(r=a[n],"textContent"!==n&&"innerHTML"!==n||(e.children&&(e.children.length=0),r!==o[n]))if("value"===n){i._value=r;var s=null==r?"":String(r);i.value===s||i.composing||(i.value=s)}else i[n]=r}}function Pe(t){var e=Se(t.style);return t.staticStyle?d(t.staticStyle,e):e}function Se(t){return Array.isArray(t)?v(t):"string"==typeof t?Zr(t):t}function Ne(t,e){var n,r={};if(e)for(var i=t;i.child;)i=i.child._vnode,i.data&&(n=Pe(i.data))&&d(r,n);(n=Pe(t.data))&&d(r,n);for(var o=t;o=o.parent;)o.data&&(n=Pe(o.data))&&d(r,n);return r}function je(t,e){var n=e.data,r=t.data;if(n.staticStyle||n.style||r.staticStyle||r.style){var i,o,a=e.elm,s=t.data.staticStyle,u=t.data.style||{},c=s||u,l=Se(e.data.style)||{};e.data.style=l.__ob__?d({},l):l;var f=Ne(e,!0);for(o in c)null==f[o]&&Wr(a,o,"");for(o in f)i=f[o],i!==c[o]&&Wr(a,o,null==i?"":i)}}function Re(t,e){if(e&&e.trim())if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+t.getAttribute("class")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Le(t,e){if(e&&e.trim())if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e);else{for(var n=" "+t.getAttribute("class")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");t.setAttribute("class",n.trim())}}function Ie(t){oi(function(){oi(t)})}function Me(t,e){(t._transitionClasses||(t._transitionClasses=[])).push(e),Re(t,e)}function Ue(t,e){t._transitionClasses&&a(t._transitionClasses,e),Le(t,e)}function Be(t,e,n){var r=Ve(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===Qr?ni:ii,u=0,c=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++u>=a&&c()};setTimeout(function(){u<a&&c()},o+1),t.addEventListener(s,l)}function Ve(t,e){var n,r=window.getComputedStyle(t),i=r[ei+"Delay"].split(", "),o=r[ei+"Duration"].split(", "),a=ze(i,o),s=r[ri+"Delay"].split(", "),u=r[ri+"Duration"].split(", "),c=ze(s,u),l=0,f=0;e===Qr?a>0&&(n=Qr,l=a,f=o.length):e===ti?c>0&&(n=ti,l=c,f=u.length):(l=Math.max(a,c),n=l>0?a>c?Qr:ti:null,f=n?n===Qr?o.length:u.length:0);var d=n===Qr&&ai.test(r[ei+"Property"]);return{type:n,timeout:l,propCount:f,hasTransform:d}}function ze(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return Ye(e)+Ye(t[n])}))}function Ye(t){return 1e3*Number(t.slice(0,-1))}function He(t){var e=t.elm;e._leaveCb&&(e._leaveCb.cancelled=!0,e._leaveCb());var n=qe(t.data.transition);if(n&&!e._enterCb&&1===e.nodeType){var r=n.css,i=n.type,o=n.enterClass,a=n.enterActiveClass,s=n.appearClass,u=n.appearActiveClass,c=n.beforeEnter,l=n.enter,f=n.afterEnter,d=n.enterCancelled,p=n.beforeAppear,h=n.appear,v=n.afterAppear,m=n.appearCancelled,y=vr.$vnode,g=y&&y.parent?y.parent.context:vr,_=!g._isMounted||!t.isRootInsert;if(!_||h||""===h){var b=_?s:o,w=_?u:a,x=_?p||c:c,E=_&&"function"==typeof h?h:l,k=_?v||f:f,A=_?m||d:d,O=r!==!1&&!Cn,C=E&&(E._length||E.length)>1,D=e._enterCb=We(function(){O&&Ue(e,w),D.cancelled?(O&&Ue(e,b),A&&A(e)):k&&k(e),e._enterCb=null});t.data.show||lt(t.data.hook||(t.data.hook={}),"insert",function(){var n=e.parentNode,r=n&&n._pending&&n._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),E&&E(e,D)},"transition-insert"),x&&x(e),O&&(Me(e,b),Me(e,w),Ie(function(){Ue(e,b),D.cancelled||C||Be(e,i,D)})),t.data.show&&E&&E(e,D),O||C||D()}}}function Ze(t,e){function n(){m.cancelled||(t.data.show||((r.parentNode._pending||(r.parentNode._pending={}))[t.key]=t),c&&c(r),h&&(Me(r,s),Me(r,u),Ie(function(){Ue(r,s),m.cancelled||v||Be(r,a,m)})),l&&l(r,m),h||v||m())}var r=t.elm;r._enterCb&&(r._enterCb.cancelled=!0,r._enterCb());var i=qe(t.data.transition);if(!i)return e();if(!r._leaveCb&&1===r.nodeType){var o=i.css,a=i.type,s=i.leaveClass,u=i.leaveActiveClass,c=i.beforeLeave,l=i.leave,f=i.afterLeave,d=i.leaveCancelled,p=i.delayLeave,h=o!==!1&&!Cn,v=l&&(l._length||l.length)>1,m=r._leaveCb=We(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[t.key]=null),h&&Ue(r,u),m.cancelled?(h&&Ue(r,s),d&&d(r)):(e(),f&&f(r)),r._leaveCb=null});p?p(n):n()}}function qe(t){if(t){if("object"==typeof t){var e={};return t.css!==!1&&d(e,si(t.name||"v")),d(e,t),e}return"string"==typeof t?si(t):void 0}}function We(t){var e=!1;return function(){e||(e=!0,t())}}function Ge(t,e,r){var i=e.value,o=t.multiple;if(o&&!Array.isArray(i))return void("production"!==n.env.NODE_ENV&&Rn('<select multiple v-model="'+e.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(i).slice(8,-1),r));for(var a,s,u=0,c=t.options.length;u<c;u++)if(s=t.options[u],o)a=_(i,Ke(s))>-1,s.selected!==a&&(s.selected=a);else if(g(Ke(s),i))return void(t.selectedIndex!==u&&(t.selectedIndex=u));o||(t.selectedIndex=-1)}function Xe(t,e){for(var n=0,r=e.length;n<r;n++)if(g(Ke(e[n]),t))return!1;return!0}function Ke(t){return"_value"in t?t._value:t.value}function Je(t){t.target.composing=!0}function Qe(t){t.target.composing=!1,tn(t.target,"input")}function tn(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function en(t){return!t.child||t.data&&t.data.transition?t:en(t.child._vnode)}function nn(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?nn(yt(e.children)):t}function rn(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[vn(o)]=i[o].fn;return e}function on(t,e){return/\d-keep-alive$/.test(e.tag)?t("keep-alive"):null}function an(t){for(;t=t.parent;)if(t.data.transition)return!0}function sn(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function un(t){t.data.newPos=t.elm.getBoundingClientRect()}function cn(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}var ln,fn,dn=o("slot,component",!0),pn=Object.prototype.hasOwnProperty,hn=/-(\w)/g,vn=c(function(t){return t.replace(hn,function(t,e){return e?e.toUpperCase():""})}),mn=c(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),yn=/([^-])([A-Z])/g,gn=c(function(t){return t.replace(yn,"$1-$2").replace(yn,"$1-$2").toLowerCase()}),_n=Object.prototype.toString,bn="[object Object]",wn=function(){return!1},xn=/[^\w.$]/,En="__proto__"in{},kn="undefined"!=typeof window&&"[object Object]"!==Object.prototype.toString.call(window),An=kn&&window.navigator.userAgent.toLowerCase(),On=An&&/msie|trident/.test(An),Cn=An&&An.indexOf("msie 9.0")>0,Dn=An&&An.indexOf("edge/")>0,Tn=An&&An.indexOf("android")>0,$n=An&&/iphone|ipad|ipod|ios/.test(An),Fn=function(){return void 0===ln&&(ln=!kn&&"undefined"!=typeof e&&"server"===e.process.env.VUE_ENV),ln},Pn=kn&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Sn=function(){function t(){r=!1;var t=n.slice(0);n.length=0;for(var e=0;e<t.length;e++)t[e]()}var e,n=[],r=!1;if("undefined"!=typeof Promise&&E(Promise)){var i=Promise.resolve();e=function(){i.then(t),$n&&setTimeout(m)}}else if("undefined"==typeof MutationObserver||!E(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())e=function(){setTimeout(t,0)};else{var o=1,a=new MutationObserver(t),s=document.createTextNode(String(o));a.observe(s,{characterData:!0}),e=function(){o=(o+1)%2,s.data=String(o)}}return function(t,i){var o;if(n.push(function(){t&&t.call(i),o&&o(i)}),r||(r=!0,e()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){o=t})}}();fn="undefined"!=typeof Set&&E(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return void 0!==this.set[t]},t.prototype.add=function(t){this.set[t]=1},t.prototype.clear=function(){this.set=Object.create(null)},t}();var Nn,jn={optionMergeStrategies:Object.create(null),silent:!1,devtools:"production"!==n.env.NODE_ENV,errorHandler:null,ignoredElements:null,keyCodes:Object.create(null),isReservedTag:wn,isUnknownElement:wn,getTagNamespace:m,mustUseProp:wn,_assetTypes:["component","directive","filter"],_lifecycleHooks:["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],_maxUpdateCount:100},Rn=m;if("production"!==n.env.NODE_ENV){var Ln="undefined"!=typeof console;Rn=function(t,e){Ln&&!jn.silent&&console.error("[Vue warn]: "+t+" "+(e?In(Nn(e)):""))},Nn=function(t){if(t.$root===t)return"root instance";var e=t._isVue?t.$options.name||t.$options._componentTag:t.name;return(e?"component <"+e+">":"anonymous component")+(t._isVue&&t.$options.__file?" at "+t.$options.__file:"")};var In=function(t){return"anonymous component"===t&&(t+=' - use the "name" option for better debugging messages.'),"\n(found in "+t+")"}}var Mn=0,Un=function(){this.id=Mn++,this.subs=[]};Un.prototype.addSub=function(t){this.subs.push(t)},Un.prototype.removeSub=function(t){a(this.subs,t)},Un.prototype.depend=function(){Un.target&&Un.target.addDep(this)},Un.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},Un.target=null;var Bn=[],Vn=Array.prototype,zn=Object.create(Vn);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=Vn[t];w(zn,t,function(){for(var n=arguments,r=arguments.length,i=new Array(r);r--;)i[r]=n[r];var o,a=e.apply(this,i),s=this.__ob__;switch(t){case"push":o=i;break;case"unshift":o=i;break;case"splice":o=i.slice(2)}return o&&s.observeArray(o),s.dep.notify(),a})});var Yn=Object.getOwnPropertyNames(zn),Hn={shouldConvert:!0,isSettingProps:!1},Zn=function(t){if(this.value=t,this.dep=new Un,this.vmCount=0,w(t,"__ob__",this),Array.isArray(t)){var e=En?O:C;e(t,zn,Yn),this.observeArray(t)}else this.walk(t)};Zn.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)T(t,e[n],t[e[n]])},Zn.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)D(t[e])};var qn=jn.optionMergeStrategies;"production"!==n.env.NODE_ENV&&(qn.el=qn.propsData=function(t,e,n,r){return n||Rn('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Gn(t,e)}),qn.data=function(t,e,r){return r?t||e?function(){var n="function"==typeof e?e.call(r):e,i="function"==typeof t?t.call(r):void 0;return n?S(n,i):i}:void 0:e?"function"!=typeof e?("production"!==n.env.NODE_ENV&&Rn('The "data" option should be a function that returns a per-instance value in component definitions.',r),t):t?function(){return S(e.call(this),t.call(this))}:e:t},jn._lifecycleHooks.forEach(function(t){qn[t]=N}),jn._assetTypes.forEach(function(t){qn[t+"s"]=j}),qn.watch=function(t,e){if(!e)return t;if(!t)return e;var n={};d(n,t);for(var r in e){var i=n[r],o=e[r];i&&!Array.isArray(i)&&(i=[i]),n[r]=i?i.concat(o):[o]}return n},qn.props=qn.methods=qn.computed=function(t,e){if(!e)return t;if(!t)return e;var n=Object.create(null);return d(n,t),d(n,e),n};var Wn,Gn=function(t,e){return void 0===e?t:e},Xn=Object.freeze({defineReactive:T,_toString:r,toNumber:i,makeMap:o,isBuiltInTag:dn,remove:a,hasOwn:s,isPrimitive:u,cached:c,camelize:vn,capitalize:mn,hyphenate:gn,bind:l,toArray:f,extend:d,isObject:p,isPlainObject:h,toObject:v,noop:m,no:wn,genStaticKeys:y,looseEqual:g,looseIndexOf:_,isReserved:b,def:w,parsePath:x,hasProto:En,inBrowser:kn,UA:An,isIE:On,isIE9:Cn,isEdge:Dn,isAndroid:Tn,isIOS:$n,isServerRendering:Fn,devtools:Pn,nextTick:Sn,get _Set(){return fn},mergeOptions:M,resolveAsset:U,get warn(){return Rn},get formatComponentName(){return Nn},validateProp:B});if("production"!==n.env.NODE_ENV){var Kn=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Jn=function(t,e){Rn('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure to declare reactive data properties in the data option.',t)},Qn="undefined"!=typeof Proxy&&Proxy.toString().match(/native code/),tr={has:function t(e,n){var t=n in e,r=Kn(n)||"_"===n.charAt(0);return t||r||Jn(e,n),t||!r}},er={get:function(t,e){return"string"!=typeof e||e in t||Jn(t,e),t[e]}};Wn=function(t){if(Qn){var e=t.$options,n=e.render&&e.render._withStripped?er:tr;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t}}var nr=[],rr={},ir={},or=!1,ar=!1,sr=0,ur=0,cr=function(t,e,r,i){void 0===i&&(i={}),this.vm=t,t._watchers.push(this),this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.expression=e.toString(),this.cb=r,this.id=++ur,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new fn,this.newDepIds=new fn,"function"==typeof e?this.getter=e:(this.getter=x(e),this.getter||(this.getter=function(){},"production"!==n.env.NODE_ENV&&Rn('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};cr.prototype.get=function(){k(this);var t=this.getter.call(this.vm,this.vm);return this.deep&&X(t),A(),this.cleanupDeps(),t},cr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},cr.prototype.cleanupDeps=function(){for(var t=this,e=this.deps.length;e--;){var n=t.deps[e];t.newDepIds.has(n.id)||n.removeSub(t)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},cr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():G(this)},cr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||p(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){if("production"!==n.env.NODE_ENV&&Rn('Error in watcher "'+this.expression+'"',this.vm),!jn.errorHandler)throw t;jn.errorHandler.call(null,t,this.vm)}else this.cb.call(this.vm,t,e)}}},cr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},cr.prototype.depend=function(){for(var t=this,e=this.deps.length;e--;)t.deps[e].depend()},cr.prototype.teardown=function(){var t=this;if(this.active){this.vm._isBeingDestroyed||this.vm._vForRemoving||a(this.vm._watchers,this);for(var e=this.deps.length;e--;)t.deps[e].removeSub(t);this.active=!1}};var lr=new fn,fr=o("key,ref,slot"),dr={enumerable:!0,configurable:!0,get:m,set:m},pr=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=o,this.context=a,this.functionalContext=void 0,this.key=e&&e.key,this.componentOptions=s,this.child=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1},hr=function(){var t=new pr;return t.text="",t.isComment=!0,t},vr=null,mr={init:kt,prepatch:At,insert:Ot,destroy:Ct},yr=Object.keys(mr),gr=0;Ut(zt),at(zt),Mt(zt),_t(zt),Rt(zt);var _r=[String,RegExp],br={name:"keep-alive",abstract:!0,props:{include:_r,exclude:_r},created:function(){this.cache=Object.create(null)},render:function(){var t=yt(this.$slots.default);if(t&&t.componentOptions){var e=t.componentOptions,n=e.Ctor.options.name||e.tag;if(n&&(this.include&&!Wt(this.include,n)||this.exclude&&Wt(this.exclude,n)))return t;var r=null==t.key?e.Ctor.cid+(e.tag?"::"+e.tag:""):t.key;this.cache[r]?t.child=this.cache[r].child:this.cache[r]=t,t.data.keepAlive=!0}return t},destroyed:function(){var t=this;for(var e in this.cache){var n=t.cache[e];bt(n.child,"deactivated"),n.child.$destroy()}}},wr={KeepAlive:br};Gt(zt),Object.defineProperty(zt.prototype,"$isServer",{get:Fn}),zt.version="2.1.3";var xr,Er=function(t,e){return"value"===e&&("input"===t||"textarea"===t||"option"===t)||"selected"===e&&"option"===t||"checked"===e&&"input"===t||"muted"===e&&"video"===t},kr=o("contenteditable,draggable,spellcheck"),Ar=o("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Or=(o("accept,accept-charset,accesskey,action,align,alt,async,autocomplete,autofocus,autoplay,autosave,bgcolor,border,buffered,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,http-equiv,name,contenteditable,contextmenu,controls,coords,data,datetime,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,method,for,form,formaction,headers,<th>,height,hidden,high,href,hreflang,http-equiv,icon,id,ismap,itemprop,keytype,kind,label,lang,language,list,loop,low,manifest,max,maxlength,media,method,GET,POST,min,multiple,email,file,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,seamless,selected,shape,size,type,text,password,sizes,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,type,usemap,value,width,wrap"),"http://www.w3.org/1999/xlink"),Cr=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Dr=function(t){return Cr(t)?t.slice(6,t.length):""},Tr=function(t){return null==t||t===!1},$r={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML",xhtml:"http://www.w3.org/1999/xhtml"},Fr=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template"),Pr=(o("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr",!0),o("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source",!0),o("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track",!0),o("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font,font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0)),Sr=function(t){return Fr(t)||Pr(t)},Nr=Object.create(null),jr=Object.freeze({createElement:ie,createElementNS:oe,createTextNode:ae,createComment:se,insertBefore:ue,removeChild:ce,appendChild:le,parentNode:fe,nextSibling:de,tagName:pe,setTextContent:he,childNodes:ve,setAttribute:me}),Rr={create:function(t,e){ye(e)},update:function(t,e){t.data.ref!==e.data.ref&&(ye(t,!0),ye(e))},destroy:function(t){ye(t,!0)}},Lr=new pr("",{},[]),Ir=["create","update","remove","destroy"],Mr={create:Ee,update:Ee,destroy:function(t){Ee(t,Lr)}},Ur=Object.create(null),Br=[Rr,Mr],Vr={create:Ce,update:Ce},zr={create:Te,update:Te},Yr={create:$e,update:$e},Hr={create:Fe,update:Fe},Zr=c(function(t){var e={},n=t.indexOf("background")>=0,r=n?/;(?![^(]*\))/g:";",i=n?/:(.+)/:":";return t.split(r).forEach(function(t){if(t){var n=t.split(i);n.length>1&&(e[n[0].trim()]=n[1].trim())}}),e}),qr=/^--/,Wr=function(t,e,n){qr.test(e)?t.style.setProperty(e,n):t.style[Xr(e)]=n},Gr=["Webkit","Moz","ms"],Xr=c(function(t){if(xr=xr||document.createElement("div"),t=vn(t),"filter"!==t&&t in xr.style)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Gr.length;n++){var r=Gr[n]+e;if(r in xr.style)return r}}),Kr={create:je,update:je},Jr=kn&&!Cn,Qr="transition",ti="animation",ei="transition",ni="transitionend",ri="animation",ii="animationend";Jr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ei="WebkitTransition",ni="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ri="WebkitAnimation",ii="webkitAnimationEnd"));var oi=kn&&window.requestAnimationFrame||setTimeout,ai=/\b(transform|all)(,|$)/,si=c(function(t){return{enterClass:t+"-enter",leaveClass:t+"-leave",appearClass:t+"-enter",enterActiveClass:t+"-enter-active",leaveActiveClass:t+"-leave-active",appearActiveClass:t+"-enter-active"}}),ui=kn?{create:function(t,e){e.data.show||He(e)},remove:function(t,e){t.data.show?e():Ze(t,e)}}:{},ci=[Vr,zr,Yr,Hr,Kr,ui],li=ci.concat(Br),fi=xe({nodeOps:jr,modules:li}),di=/^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;Cn&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&tn(t,"input")});var pi={inserted:function(t,e,r){if("production"!==n.env.NODE_ENV&&(di.test(r.tag)||Rn("v-model is not supported on element type: <"+r.tag+">. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",r.context)),"select"===r.tag){var i=function(){Ge(t,e,r.context)};i(),(On||Dn)&&setTimeout(i,0)}else"textarea"!==r.tag&&"text"!==t.type||e.modifiers.lazy||(Tn||(t.addEventListener("compositionstart",Je),t.addEventListener("compositionend",Qe)),Cn&&(t.vmodel=!0))},componentUpdated:function(t,e,n){if("select"===n.tag){Ge(t,e,n.context);var r=t.multiple?e.value.some(function(e){return Xe(e,t.options)}):e.value!==e.oldValue&&Xe(e.value,t.options);r&&tn(t,"change")}}},hi={bind:function(t,e,n){var r=e.value;n=en(n);var i=n.data&&n.data.transition;r&&i&&!Cn&&He(n);var o="none"===t.style.display?"":t.style.display;t.style.display=r?o:"none",t.__vOriginalDisplay=o},update:function(t,e,n){var r=e.value,i=e.oldValue;if(r!==i){n=en(n);var o=n.data&&n.data.transition;o&&!Cn?r?(He(n),t.style.display=t.__vOriginalDisplay):Ze(n,function(){t.style.display="none"}):t.style.display=r?t.__vOriginalDisplay:"none"}}},vi={model:pi,show:hi},mi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String},yi={name:"transition",props:mi,abstract:!0,render:function(t){var e=this,r=this.$slots.default;if(r&&(r=r.filter(function(t){return t.tag}),r.length)){"production"!==n.env.NODE_ENV&&r.length>1&&Rn("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var i=this.mode;"production"!==n.env.NODE_ENV&&i&&"in-out"!==i&&"out-in"!==i&&Rn("invalid <transition> mode: "+i,this.$parent);var o=r[0];if(an(this.$vnode))return o;var a=nn(o);if(!a)return o;if(this._leaving)return on(t,o);var s=a.key=null==a.key||a.isStatic?"__v"+(a.tag+this._uid)+"__":a.key,u=(a.data||(a.data={})).transition=rn(this),c=this._vnode,l=nn(c);if(a.data.directives&&a.data.directives.some(function(t){return"show"===t.name})&&(a.data.show=!0),l&&l.data&&l.key!==s){var f=l.data.transition=d({},u);if("out-in"===i)return this._leaving=!0,lt(f,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()},s),on(t,o);if("in-out"===i){var p,h=function(){p()};lt(u,"afterEnter",h,s),lt(u,"enterCancelled",h,s),lt(f,"delayLeave",function(t){p=t},s)}}return o}}},gi=d({tag:String,moveClass:String},mi);delete gi.mode;var _i={props:gi,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),i=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],s=rn(this),u=0;u<o.length;u++){var c=o[u];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))a.push(c),r[c.key]=c,(c.data||(c.data={})).transition=s;else if("production"!==n.env.NODE_ENV){var l=c.componentOptions,f=l?l.Ctor.options.name||l.tag:c.tag;Rn("<transition-group> children must be keyed: <"+f+">")}}if(i){for(var d=[],p=[],h=0;h<i.length;h++){var v=i[h];v.data.transition=s,v.data.pos=v.elm.getBoundingClientRect(),r[v.key]?d.push(v):p.push(v)}this.kept=t(e,null,d),this.removed=p}return t(e,null,a)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";if(t.length&&this.hasMove(t[0].elm,e)){t.forEach(sn),t.forEach(un),t.forEach(cn);document.body.offsetHeight;t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;Me(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ni,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ni,t),n._moveCb=null,Ue(n,e))})}})}},methods:{hasMove:function(t,e){if(!Jr)return!1;if(null!=this._hasMove)return this._hasMove;Me(t,e);var n=Ve(t);return Ue(t,e),this._hasMove=n.hasTransform}}},bi={Transition:yi,TransitionGroup:_i};zt.config.isUnknownElement=ne,zt.config.isReservedTag=Sr,zt.config.getTagNamespace=ee,zt.config.mustUseProp=Er,d(zt.options.directives,vi),d(zt.options.components,bi),zt.prototype.__patch__=kn?fi:m,zt.prototype.$mount=function(t,e){return t=t&&kn?re(t):void 0,this._mount(t,e)},setTimeout(function(){jn.devtools&&(Pn?Pn.emit("init",zt):"production"!==n.env.NODE_ENV&&kn&&/Chrome\/\d+/.test(window.navigator.userAgent)&&console.log("Download the Vue Devtools for a better development experience:\nhttps://github.com/vuejs/vue-devtools"))},0),t.exports=zt}).call(e,function(){return this}(),n(2))},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function o(t){if(f===clearTimeout)return clearTimeout(t);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(t);try{return f(t)}catch(e){try{return f.call(null,t)}catch(e){return f.call(this,t)}}}function a(){v&&p&&(v=!1,p.length?h=p.concat(h):m=-1,h.length&&s())}function s(){if(!v){var t=i(a);v=!0;for(var e=h.length;e;){for(p=h,h=[];++m<e;)p&&p[m].run();m=-1,e=h.length}p=null,v=!1,o(t)}}function u(t,e){this.fun=t,this.array=e}function c(){}var l,f,d=t.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(t){f=r}}();var p,h=[],v=!1,m=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];h.push(new u(t,e)),1!==h.length||v||i(s)},u.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=c,d.addListener=c,d.once=c,d.off=c,d.removeListener=c,d.removeAllListeners=c,d.emit=c,d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(t,e,n){var r,i;n(4),r=n(14);var o=n(102);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,t.exports=r},function(t,e,n){var r=n(5);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.i(n(7),""),e.push([t.id,"footer:after,header:after{content:' ';display:table;clear:both}.expand-y-enter-active,.expand-y-leave-active,.modal-enter-active,.modal-leave-active,.player-more-enter-active,.player-more-leave-active{transition:transform .3s ease}.expand-y-enter,.expand-y-leave-active,.modal-enter,.modal-leave-active,.player-more-enter,.player-more-leave-active{transform:scaleY(0)}.player-more-enter,.player-more-enter-active,.player-more-leave-active{transform-origin:center top}#body,.app,body,html{width:100%;height:100%;margin:0}body{font-size:14px;font-family:Arial,Helvetica,sans-serif;line-height:18px}*{box-sizing:border-box}.app{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}footer,header{width:100%;background-color:#1161b3}footer .left,header .left{float:left}footer .right,header .right{float:right}footer .center,header .center{margin:auto;text-align:center}footer .mobile-row,header .mobile-row{display:inline-block}@media (max-width:540px){footer .mobile-row,header .mobile-row{padding-bottom:10px;display:block}footer .mobile-row:last-child,header .mobile-row:last-child{padding-bottom:0}}.lyric-editor{-ms-flex:1;flex:1;overflow:auto}.form-group{display:-ms-flexbox;display:flex;padding:5px 0;-ms-flex-align:center;align-items:center}.form-group label{vertical-align:middle;padding-right:10px}.form-group input{-ms-flex:1;flex:1;height:30px;border:1px solid #d6d6d6;padding:0 3px;border-radius:5px}.menu-item{display:inline-block;color:#fff;height:40px;line-height:40px;padding:0 8px;cursor:pointer}.menu-item:hover{background-color:#0d4884}.btn{border-radius:5px;display:inline-block;padding:6px;font-weight:bolder;cursor:pointer;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#1161b3;color:#fff}.btn:hover{background-color:#124b86}.btn.white,footer .btn,header .btn{background:#fff;color:#1161b3}.btn.white:hover,footer .btn:hover,header .btn:hover{background-color:#e8e1e1}",""])},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,"@font-face{font-family:fontello;src:url("+n(8)+");src:url("+n(8)+"#iefix) format('embedded-opentype'),url("+n(9)+") format('woff2'),url("+n(10)+") format('woff'),url("+n(11)+") format('truetype'),url("+n(12)+"#fontello) format('svg');font-weight:400;font-style:normal}[class*=\" icon-\"]:before,[class^=icon-]:before{font-family:fontello;font-style:normal;font-weight:400;speak:none;display:inline-block;text-decoration:inherit;width:1em;margin-right:.2em;text-align:center;font-variant:normal;text-transform:none;line-height:1em;margin-left:.2em;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.icon-edit:before{content:'\\E800'}.icon-save:before{content:'\\E801'}.icon-trash:before{content:'\\E802'}.icon-download:before{content:'\\E803'}.icon-upload:before{content:'\\E804'}.icon-right:before{content:'\\E805'}.icon-left:before{content:'\\E806'}.icon-up:before{content:'\\E807'}.icon-down:before{content:'\\E808'}.icon-volume-off:before{content:'\\E809'}.icon-volume-up:before{content:'\\E80A'}.icon-plus:before{content:'\\E80D'}.icon-cancel:before{content:'\\E80E'}.icon-ellipsis-vert:before{content:'\\E80F'}.icon-info:before{content:'\\E810'}.icon-help-circled:before{content:'\\E811'}.icon-play:before{content:'\\E812'}.icon-pause:before{content:'\\E813'}.icon-forward:before{content:'\\E814'}.icon-backward:before{content:'\\E815'}.icon-stop:before{content:'\\E816'}",""]);
},function(t,e,n){t.exports=n.p+"2bb4ae08084b7a900bfe1c703c988f34.eot"},function(t,e,n){t.exports=n.p+"f313a0f987672dc77a8c243380e2089e.woff2"},function(t,e,n){t.exports=n.p+"4cc930163f6d5088dfa5fef619d87cb9.woff"},function(t,e,n){t.exports=n.p+"b483544303fcfc7e1e34159a411fcdcb.ttf"},function(t,e,n){t.exports=n.p+"f4037f8d16f43379b18020706bdc9567.svg"},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=f[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(u(r.parts[o],e))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(u(r.parts[o],e));f[r.id]={id:r.id,refs:1,parts:a}}}}function i(t){for(var e=[],n={},r=0;r<t.length;r++){var i=t[r],o=i[0],a=i[1],s=i[2],u=i[3],c={css:a,media:s,sourceMap:u};n[o]?n[o].parts.push(c):e.push(n[o]={id:o,parts:[c]})}return e}function o(t,e){var n=h(),r=y[y.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),y.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function a(t){t.parentNode.removeChild(t);var e=y.indexOf(t);e>=0&&y.splice(e,1)}function s(t){var e=document.createElement("style");return e.type="text/css",o(t,e),e}function u(t,e){var n,r,i;if(e.singleton){var o=m++;n=v||(v=s(e)),r=c.bind(null,n,o,!1),i=c.bind(null,n,o,!0)}else n=s(e),r=l.bind(null,n),i=function(){a(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}function c(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function l(t,e){var n=e.css,r=e.media,i=e.sourceMap;if(r&&t.setAttribute("media",r),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var f={},d=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},p=d(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),h=d(function(){return document.head||document.getElementsByTagName("head")[0]}),v=null,m=0,y=[];t.exports=function(t,e){e=e||{},"undefined"==typeof e.singleton&&(e.singleton=p()),"undefined"==typeof e.insertAt&&(e.insertAt="bottom");var n=i(t);return r(n,e),function(t){for(var o=[],a=0;a<n.length;a++){var s=n[a],u=f[s.id];u.refs--,o.push(u)}if(t){var c=i(t);r(c,e)}for(var a=0;a<o.length;a++){var u=o[a];if(0===u.refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete f[u.id]}}}};var g=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(15),o=r(i),a=n(20),s=r(a),u=n(51),c=r(u),l=n(73),f=r(l),d=n(95),p=r(d),h=n(55),v=n(48),m=r(v);e.default={data:function(){var t=m.default.lrcFormat;return{musicUrl:"",editing:m.default.editing,lrcFormat:t,runner:new h.Runner(h.Lrc.parse(t)),lyricArray:m.default.lyricArray}},created:function(){window.$App=this},methods:{uploadMusic:function(t){this.$refs.player.src=t},removeLyric:function(){this.lrcFormat="",this.lyricArray=[],this.runner=new h.Runner},playto:function(t){this.$refs.player.playto(t)},timeupdate:function(t){this.$refs.lyric.$emit("timeupdate",t)}},watch:{editing:function(t){m.default.editing=t},lrcFormat:function(t){m.default.lrcFormat=t,this.runner=new h.Runner(h.Lrc.parse(this.lrcFormat))},lyricArray:{deep:!0,handler:function(){m.default.lyricArray=this.lyricArray}}},components:{Upload:o.default,Player:s.default,LyricEditor:c.default,Modals:f.default,NavMenu:p.default}}},function(t,e,n){var r,i;n(16),r=n(18);var o=n(19);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-27024123",t.exports=r},function(t,e,n){var r=n(17);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,"input[type=file][data-v-27024123]{display:none}",""])},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={mounted:function(){var t=this,e=this.$refs.upload;e.addEventListener("change",function(){var n=new FileReader;n.onload=function(e){t.$emit("uploaded",e.target.result)},e.files.length>0&&t.type_match()&&n["readAs"+t.readFormat](e.files[0])})},props:{type:{type:String},readFormat:{type:String,default:"Text"},accept:{type:String,default:""}},methods:{upload:function(){this.$refs.upload.click()},type_match:function(){if(this.type){var t=new RegExp("^"+this.type+"/");return t.test(this.$refs.upload.files[0].type)}return!0}}}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{on:{click:t.upload}},[t._h("i",{staticClass:"icon-upload"})," ",t._t("default")," ",t._h("input",{ref:"upload",attrs:{type:"file",accept:t.accept}})])},staticRenderFns:[]}},function(t,e,n){var r,i;n(21),r=n(23);var o=n(50);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-9b2943fa",t.exports=r},function(t,e,n){var r=n(22);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".root[data-v-9b2943fa]{height:30px}.root.mobile[data-v-9b2943fa]{height:60px}.more[data-v-9b2943fa],.player[data-v-9b2943fa],.sound[data-v-9b2943fa]{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.more[data-v-9b2943fa],.player[data-v-9b2943fa]{background:#d0dae4;color:#1161b3;height:30px}.ctrl-btn[data-v-9b2943fa]{font-size:20px;padding:0 1px}.range[data-v-9b2943fa]{margin-left:4px;margin-right:4px}.range.music[data-v-9b2943fa]{-ms-flex:1;flex:1}time-panel[data-v-9b2943fa]{padding:0 5px}.more[data-v-9b2943fa]{height:30px;-ms-flex-pack:end;justify-content:flex-end;position:relative;z-index:10}.mobile .more[data-v-9b2943fa]{-ms-flex-pack:justify;justify-content:space-between}.sound[data-v-9b2943fa]{padding:0 5px;width:30%}.sound .range.volume[data-v-9b2943fa]{-ms-flex:1;flex:1}.sound .ctrl-mute-btn[data-v-9b2943fa]{width:26px;font-size:18px}",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(24),o=r(i),a=n(44),s=r(a),u=n(28);e.default={data:function(){return{hover:!1,isMobile:u.isMobile,process:0,muted:!1,paused:!0,currentTime:0,duration:0,volume:0,src:"",audio:null}},methods:{seek:function(t){this.playto(parseFloat(t*this.audio.duration))},volumeSeek:function(t){this.audio.volume=this.volume=t},playto:function(t){var e=this;this.paused&&(this.paused=!1),this.$nextTick(function(){e.currentTime=e.audio.currentTime=t})}},mounted:function(){var t=this;this.audio=document.createElement("video"),this.audio.preload="metadata",this.audio.addEventListener("durationchange",function(){t.duration=t.audio.duration}),this.audio.addEventListener("timeupdate",function(){t.currentTime=t.audio.currentTime,t.process=t.currentTime/t.duration,t.$emit("timeupdate",t.currentTime)}),this.audio.addEventListener("ended",function(){t.$emit("timeupdate",t.currentTime),t.process=0,t.paused=!0}),u.globalKeydown.on("space",function(){return t.paused=!t.paused,!1}).on("arrowleft",function(){return t.$emit("backward"),!1}).on("arrowright",function(){return t.$emit("forward"),!1}),this.$on("backward",function(){t.playto(t.audio.currentTime-5)}).$on("forward",function(){t.playto(t.audio.currentTime+5)})},watch:{src:{immediate:!0,handler:function(t){t&&(this.paused=!0,this.audio.src=t,this.process=0,this.volume=this.audio.volume,this.currentTime=this.audio.currentTime,this.duration=this.audio.duration)}},process:function(t){this.$refs.musicRange.changeValue(t)},volume:function(t){this.$refs.soundRange.changeValue(t)},muted:function(t){this.audio.muted=t},paused:function(){this.paused?this.audio.pause():this.audio.play()}},components:{Range:o.default,TimePanel:s.default}}},function(t,e,n){var r,i;n(25),r=n(27);var o=n(43);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-50bb530b",t.exports=r},function(t,e,n){var r=n(26);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".bar[data-v-50bb530b]{position:relative;height:10px}.wrap[data-v-50bb530b]{width:100%;height:100%;background-color:#123b5d;border-radius:5px;overflow:hidden}.value[data-v-50bb530b]{height:100%;background-color:#1161b3}.thumb[data-v-50bb530b]{cursor:move;position:absolute;top:-3px;width:10px;height:16px;background:#fff;box-shadow:inset -1px -1px 5px -2px #0b2031;border-radius:16px;transform:translateX(-5px)}",""])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(28);e.default={data:function(){return{selfValue:0,draging:!1,dragValue:0}},props:{value:{type:Number,default:0,validator:function(t){return t>=0&&t<=1}}},methods:{click:function(t){t.target!==this.$refs.thumb&&(this.selfValue=this.offset2value(t.offsetX),this.emitSeek())},emitSeek:function(){this.$emit("seek",this.selfValue)},emitDragSeek:function(){this.$emit("drag-seek",this.selfValue)},offset2value:function(t){return t/this.$refs.bar.clientWidth},changeValue:function(t){this.draging||(this.selfValue=t)}},mounted:function(){var t=this,e=this.$refs.thumb,n=this.$refs.bar,i=new r.Dragger(e,n);i.on("start",function(){t.draging=!0}).on("move",function(){t.selfValue=t.offset2value(i.offset),t.emitDragSeek()}).on("end",function(){t.draging=!1,t.selfValue=t.offset2value(i.offset),t.emitSeek()}),i.create()}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function s(t,e){D?m.default.saveAs(new Blob([t],{type:"text/plain;charset=utf-8"}),e+".lrc"):alert("Please upgrade your browser")}function u(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t||(t=0);var n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;for(t=t.toString();t.split(".")[0].length<e;)t="0"+t;return t};return e?n(parseInt(t/60,10))+":"+n(parseInt(t%60,10)):n(parseInt(t/60,10))+":"+n((t%60).toFixed(2),2)}function c(t){var e=t.split(":"),n=l(e,2),r=n[0],i=n[1];return 60*parseInt(r,10)+parseFloat(i)}Object.defineProperty(e,"__esModule",{value:!0}),e.TooltipPosition=e.Dragger=e.globalKeydown=e.cache=e.Cache=e.DelayHover=e.Scroller=e.EventEmitter=e.isMobile=void 0;var l=function(){function t(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),d=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,r)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(r)};e.saveLrc=s,e.timestamp2timestr=u,e.timestr2timestamp=c;var p=n(29),h=r(p),v=n(30),m=r(v),y=n(33),g=r(y),_=n(36),b=r(_),w=n(37),x=r(w),E=n(38),k=r(E),A=e.isMobile="ontouchstart"in window,O=e.EventEmitter=function(t){function e(){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,t),f(e,[{key:"on",value:function(t){for(var n=this,r=arguments.length,i=Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];if(b.default.array(t))t.forEach(function(t){var r;(r=d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"on",n)).call.apply(r,[n,t].concat(i))});else{var a;(a=d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"on",this)).call.apply(a,[this,t].concat(i))}return this}}]),e}(h.default),C=(e.Scroller=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,t),this.timer=[],this.scrollableStartTime=new Date,this.viewport=e,this.config=(0,x.default)({delay:3,time:1,step:100},r),this.viewport.addEventListener("scroll",function(){n.isCanScroll()||n.letDelay()})}return f(t,[{key:"letDelay",value:function(){this.scrollableStartTime=Date.now()+1e3*this.config.delay}},{key:"clearTimer",value:function(){this.timer.forEach(function(t){return clearTimeout(t)}),this.timer=[]}},{key:"isCanScroll",value:function(){return Date.now()>this.scrollableStartTime}},{key:"scrollTo",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.isCanScroll()||n!==!1){this.clearTimer();var r=this.viewport.scrollTop,i=t,o=i-r;if(0!==o)for(var a=o/this.config.step,s=r,u=1;u<this.config.step;++u)!function(t){e.timer.push(setTimeout(function(){s!==e.viewport.scrollTop?(e.clearTimer(),e.letDelay()):(e.viewport.scrollTop=r+a*t,s=e.viewport.scrollTop)},1e3*e.config.time*t/e.config.step))}(u)}}}]),t}(),e.DelayHover=function(t){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,e);var r=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return r.enterTimer=null,r.leaveTimer=null,r.show=!1,r.element=t,r.cfg=(0,x.default)({enterDelay:.5,leaveDelay:.3,unique:!0},n),r.hover(function(){r.show=!0},function(){r.show=!1}),A?r.element.addEventListener("click",function(){r.show?r.emit("leave"):(r.closeLastHover(),r.emit("enter"))}):(r.element.addEventListener("mouseenter",function(){r.clearLeaveTimer(),r.enterTimer=setTimeout(function(){r.closeLastHover(),e.LastHover=r,r.emit("enter")},1e3*r.cfg.enterDelay)}),r.element.addEventListener("mouseleave",function(){r.clearEnterTimer(),r.leaveTimer=setTimeout(function(){r.emit("leave")},1e3*r.cfg.leaveDelay)})),r}return a(e,t),f(e,[{key:"closeLastHover",value:function(){this.cfg.unique&&e.LastHover&&e.LastHover!=this&&e.LastHover.emit("leave")}},{key:"clearLeaveTimer",value:function(){null!==this.leaveTimer&&(clearTimeout(this.leaveTimer),this.leaveTimer=null)}},{key:"clearEnterTimer",value:function(){null!==this.enterTimer&&(clearTimeout(this.enterTimer),this.enterTimer=null)}},{key:"hover",value:function(t,e){this.on("enter",t).on("leave",e)}}]),e}(O));C.LastHover=null;var D;try{D=!!new Blob}catch(t){D=!1}var T=e.Cache=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"lrc";i(this,t),this.version=2,this.prefix=e}return f(t,[{key:"read",value:function(){var t;if(this.prefix in localStorage){try{t=JSON.parse(localStorage[this.prefix])}catch(t){console.error(t)}if(t.$version===this.version)return t}return{}}},{key:"write",value:function(t){t.$version=this.version,localStorage[this.prefix]=JSON.stringify(t)}},{key:"get",value:function(t,e){var n=this.read();return t in n?n[t]:e}},{key:"set",value:function(t,e){var n=this.read();n[t]=e;try{this.write(n)}catch(t){console.error(t)}}}]),t}(),$=(e.cache=new T,e.globalKeydown=new O);window.addEventListener("keydown",function(t){if(!/(input|select|option|textarea)/.test(t.target.tagName.toLowerCase())){var e=t.code.toLowerCase(),n=$.listeners(e).map(function(e){return e(t)===!1});if(n.length){var r=!1;n.forEach(function(t){t&&(r=!0)}),r&&t.preventDefault()}}});e.Dragger=function(t){function e(t,n){i(this,e);var r=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.ee=new O,r.element=t,r.container=n,r}return a(e,t),f(e,[{key:"on",value:function(){var t;return(t=this.ee).on.apply(t,arguments)}},{key:"emit",value:function(){var t;return(t=this.ee).emit.apply(t,arguments)}},{key:"create",value:function(){this.handles=[this.element],this.bindHandles()}},{key:"dragStart",value:function(t){this.dragStartPoint.left=this.element.offsetLeft,this.emit("start",t)}},{key:"dragMove",value:function(t,e,n){this.offset=this.dragStartPoint.left+n.x,this.offset<0?this.offset=0:this.offset>this.container.clientWidth&&(this.offset=this.container.clientWidth),this.emit("move",t,e,n)}},{key:"dragEnd",value:function(t,e){this.emit("end",t,e)}}]),e}(g.default),e.TooltipPosition=function(){function t(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"bottom";i(this,t),this.dirs=["bottom","right","top","left"],this.target=e,this.tooltip=n,this.viewport=document.documentElement,this.generateDirs(r)}return f(t,[{key:"generateDirs",value:function(t){var e=this.dirs.indexOf(t);this.dirs.splice(e,1),this.dirs.unshift(t)}},{key:"checkRectOverflow",value:function(t){return t.left>=0&&t.top>=0&&t.right<=this.viewport.clientWidth&&t.bottom<=this.viewport.clientHeight}},{key:"rectOverflowCount",value:function(t){var e=function(t){return t<0?t:0};return e(t.left)+e(t.top)+e(this.viewport.clientWidth-t.right)+e(this.viewport.clientHeight-t.bottom)}},{key:"position",value:function(){for(var t=this.target.getBoundingClientRect(),e=this.tooltip.clientWidth,n=this.tooltip.clientHeight,r={width:e,height:n},i=[],o=0;o<this.dirs.length;++o){var a=this.dirs[o];switch(this.dirs[o]){case"bottom":r.left=t.left+t.width/2-e/2,r.right=r.left+e,r.top=t.bottom,r.bottom=t.bottom+n;break;case"top":r.left=t.left+t.width/2-e/2,r.right=r.left+e,r.top=t.top-n,r.bottom=t.top;break;case"left":r.left=t.left-e,r.right=t.left,r.top=t.top+t.height/2-n/2,r.bottom=r.top+n;break;case"right":r.left=t.right,r.right=t.right+e,r.top=t.top+t.height/2-n/2,r.bottom=r.top+n}i.push([this.rectOverflowCount(r),a,(0,k.default)(r)])}return i.sort(function(t,e){return e[0]-t[0]}),{dir:i[0][1],rect:i[0][2]}}}]),t}()},function(t,e,n){var r;!function(i){function o(){this._events={},this._conf&&a.call(this,this._conf)}function a(t){t?(this._conf=t,t.delimiter&&(this.delimiter=t.delimiter),this._events.maxListeners=t.maxListeners!==i?t.maxListeners:d,t.wildcard&&(this.wildcard=t.wildcard),t.newListener&&(this.newListener=t.newListener),t.verboseMemoryLeak&&(this.verboseMemoryLeak=t.verboseMemoryLeak),this.wildcard&&(this.listenerTree={})):this._events.maxListeners=d}function s(t,e){var n="(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.";this.verboseMemoryLeak?(n+=" Event name: %s.",console.error(n,t,e)):console.error(n,t),console.trace&&console.trace()}function u(t){this._events={},this.newListener=!1,this.verboseMemoryLeak=!1,a.call(this,t)}function c(t,e,n,r){if(!n)return[];var i,o,a,s,u,l,f,d=[],p=e.length,h=e[r],v=e[r+1];if(r===p&&n._listeners){if("function"==typeof n._listeners)return t&&t.push(n._listeners),[n];for(i=0,o=n._listeners.length;i<o;i++)t&&t.push(n._listeners[i]);return[n]}if("*"===h||"**"===h||n[h]){if("*"===h){for(a in n)"_listeners"!==a&&n.hasOwnProperty(a)&&(d=d.concat(c(t,e,n[a],r+1)));return d}if("**"===h){f=r+1===p||r+2===p&&"*"===v,f&&n._listeners&&(d=d.concat(c(t,e,n,p)));for(a in n)"_listeners"!==a&&n.hasOwnProperty(a)&&("*"===a||"**"===a?(n[a]._listeners&&!f&&(d=d.concat(c(t,e,n[a],p))),d=d.concat(c(t,e,n[a],r))):d=a===v?d.concat(c(t,e,n[a],r+2)):d.concat(c(t,e,n[a],r)));return d}d=d.concat(c(t,e,n[h],r+1))}if(s=n["*"],s&&c(t,e,s,r+1),u=n["**"])if(r<p){u._listeners&&c(t,e,u,p);for(a in u)"_listeners"!==a&&u.hasOwnProperty(a)&&(a===v?c(t,e,u[a],r+2):a===h?c(t,e,u[a],r+1):(l={},l[a]=u[a],c(t,e,{"**":l},r+1)))}else u._listeners?c(t,e,u,p):u["*"]&&u["*"]._listeners&&c(t,e,u["*"],p);return d}function l(t,e){t="string"==typeof t?t.split(this.delimiter):t.slice();for(var n=0,r=t.length;n+1<r;n++)if("**"===t[n]&&"**"===t[n+1])return;for(var o=this.listenerTree,a=t.shift();a!==i;){if(o[a]||(o[a]={}),o=o[a],0===t.length)return o._listeners?("function"==typeof o._listeners&&(o._listeners=[o._listeners]),o._listeners.push(e),!o._listeners.warned&&this._events.maxListeners>0&&o._listeners.length>this._events.maxListeners&&(o._listeners.warned=!0,s.call(this,o._listeners.length,a))):o._listeners=e,!0;a=t.shift()}return!0}var f=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},d=10;u.EventEmitter2=u,u.prototype.delimiter=".",u.prototype.setMaxListeners=function(t){t!==i&&(this._events||o.call(this),this._events.maxListeners=t,this._conf||(this._conf={}),this._conf.maxListeners=t)},u.prototype.event="",u.prototype.once=function(t,e){return this.many(t,1,e),this},u.prototype.many=function(t,e,n){function r(){0===--e&&i.off(t,r),n.apply(this,arguments)}var i=this;if("function"!=typeof n)throw new Error("many only accepts instances of Function");return r._origin=n,this.on(t,r),i},u.prototype.emit=function(){this._events||o.call(this);var t=arguments[0];if("newListener"===t&&!this.newListener&&!this._events.newListener)return!1;var e,n,r,i,a,s=arguments.length;if(this._all&&this._all.length){if(a=this._all.slice(),s>3)for(e=new Array(s),i=0;i<s;i++)e[i]=arguments[i];for(r=0,n=a.length;r<n;r++)switch(this.event=t,s){case 1:a[r].call(this,t);break;case 2:a[r].call(this,t,arguments[1]);break;case 3:a[r].call(this,t,arguments[1],arguments[2]);break;default:a[r].apply(this,e)}}if(this.wildcard){a=[];var u="string"==typeof t?t.split(this.delimiter):t.slice();c.call(this,a,u,this.listenerTree,0)}else{if(a=this._events[t],"function"==typeof a){switch(this.event=t,s){case 1:a.call(this);break;case 2:a.call(this,arguments[1]);break;case 3:a.call(this,arguments[1],arguments[2]);break;default:for(e=new Array(s-1),i=1;i<s;i++)e[i-1]=arguments[i];a.apply(this,e)}return!0}a&&(a=a.slice())}if(a&&a.length){if(s>3)for(e=new Array(s-1),i=1;i<s;i++)e[i-1]=arguments[i];for(r=0,n=a.length;r<n;r++)switch(this.event=t,s){case 1:a[r].call(this);break;case 2:a[r].call(this,arguments[1]);break;case 3:a[r].call(this,arguments[1],arguments[2]);break;default:a[r].apply(this,e)}return!0}if(!this._all&&"error"===t)throw arguments[1]instanceof Error?arguments[1]:new Error("Uncaught, unspecified 'error' event.");return!!this._all},u.prototype.emitAsync=function(){this._events||o.call(this);var t=arguments[0];if("newListener"===t&&!this.newListener&&!this._events.newListener)return Promise.resolve([!1]);var e,n,r,i,a,s=[],u=arguments.length;if(this._all){if(u>3)for(e=new Array(u),i=1;i<u;i++)e[i]=arguments[i];for(r=0,n=this._all.length;r<n;r++)switch(this.event=t,u){case 1:s.push(this._all[r].call(this,t));break;case 2:s.push(this._all[r].call(this,t,arguments[1]));break;case 3:s.push(this._all[r].call(this,t,arguments[1],arguments[2]));break;default:s.push(this._all[r].apply(this,e))}}if(this.wildcard){a=[];var l="string"==typeof t?t.split(this.delimiter):t.slice();c.call(this,a,l,this.listenerTree,0)}else a=this._events[t];if("function"==typeof a)switch(this.event=t,u){case 1:s.push(a.call(this));break;case 2:s.push(a.call(this,arguments[1]));break;case 3:s.push(a.call(this,arguments[1],arguments[2]));break;default:for(e=new Array(u-1),i=1;i<u;i++)e[i-1]=arguments[i];s.push(a.apply(this,e))}else if(a&&a.length){if(u>3)for(e=new Array(u-1),i=1;i<u;i++)e[i-1]=arguments[i];for(r=0,n=a.length;r<n;r++)switch(this.event=t,u){case 1:s.push(a[r].call(this));break;case 2:s.push(a[r].call(this,arguments[1]));break;case 3:s.push(a[r].call(this,arguments[1],arguments[2]));break;default:s.push(a[r].apply(this,e))}}else if(!this._all&&"error"===t)return arguments[1]instanceof Error?Promise.reject(arguments[1]):Promise.reject("Uncaught, unspecified 'error' event.");return Promise.all(s)},u.prototype.on=function(t,e){if("function"==typeof t)return this.onAny(t),this;if("function"!=typeof e)throw new Error("on only accepts instances of Function");return this._events||o.call(this),this.emit("newListener",t,e),this.wildcard?(l.call(this,t,e),this):(this._events[t]?("function"==typeof this._events[t]&&(this._events[t]=[this._events[t]]),this._events[t].push(e),!this._events[t].warned&&this._events.maxListeners>0&&this._events[t].length>this._events.maxListeners&&(this._events[t].warned=!0,s.call(this,this._events[t].length,t))):this._events[t]=e,this)},u.prototype.onAny=function(t){if("function"!=typeof t)throw new Error("onAny only accepts instances of Function");return this._all||(this._all=[]),this._all.push(t),this},u.prototype.addListener=u.prototype.on,u.prototype.off=function(t,e){function n(t){if(t!==i){var e=Object.keys(t);for(var r in e){var o=e[r],a=t[o];a instanceof Function||"object"!=typeof a||null===a||(Object.keys(a).length>0&&n(t[o]),0===Object.keys(a).length&&delete t[o])}}}if("function"!=typeof e)throw new Error("removeListener only takes instances of Function");var r,o=[];if(this.wildcard){var a="string"==typeof t?t.split(this.delimiter):t.slice();o=c.call(this,null,a,this.listenerTree,0)}else{if(!this._events[t])return this;r=this._events[t],o.push({_listeners:r})}for(var s=0;s<o.length;s++){var u=o[s];if(r=u._listeners,f(r)){for(var l=-1,d=0,p=r.length;d<p;d++)if(r[d]===e||r[d].listener&&r[d].listener===e||r[d]._origin&&r[d]._origin===e){l=d;break}if(l<0)continue;return this.wildcard?u._listeners.splice(l,1):this._events[t].splice(l,1),0===r.length&&(this.wildcard?delete u._listeners:delete this._events[t]),this.emit("removeListener",t,e),this}(r===e||r.listener&&r.listener===e||r._origin&&r._origin===e)&&(this.wildcard?delete u._listeners:delete this._events[t],this.emit("removeListener",t,e))}return n(this.listenerTree),this},u.prototype.offAny=function(t){var e,n=0,r=0;if(t&&this._all&&this._all.length>0){for(e=this._all,n=0,r=e.length;n<r;n++)if(t===e[n])return e.splice(n,1),this.emit("removeListenerAny",t),this}else{for(e=this._all,n=0,r=e.length;n<r;n++)this.emit("removeListenerAny",e[n]);this._all=[]}return this},u.prototype.removeListener=u.prototype.off,u.prototype.removeAllListeners=function(t){if(0===arguments.length)return!this._events||o.call(this),this;if(this.wildcard)for(var e="string"==typeof t?t.split(this.delimiter):t.slice(),n=c.call(this,null,e,this.listenerTree,0),r=0;r<n.length;r++){var i=n[r];i._listeners=null}else this._events&&(this._events[t]=null);return this},u.prototype.listeners=function(t){if(this.wildcard){var e=[],n="string"==typeof t?t.split(this.delimiter):t.slice();return c.call(this,e,n,this.listenerTree,0),e}return this._events||o.call(this),this._events[t]||(this._events[t]=[]),f(this._events[t])||(this._events[t]=[this._events[t]]),this._events[t]},u.prototype.listenerCount=function(t){return this.listeners(t).length},u.prototype.listenersAny=function(){return this._all?this._all:[]},r=function(){return u}.call(e,n,e,t),!(r!==i&&(t.exports=r))}()},function(t,e,n){var r,i,o=o||function(t){"use strict";if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var e=t.document,n=function(){return t.URL||t.webkitURL||t},r=e.createElementNS("http://www.w3.org/1999/xhtml","a"),i="download"in r,o=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},a=t.webkitRequestFileSystem,s=t.requestFileSystem||a||t.mozRequestFileSystem,u=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},c="application/octet-stream",l=0,f=500,d=function(e){var r=function(){"string"==typeof e?n().revokeObjectURL(e):e.remove()};t.chrome?r():setTimeout(r,f)},p=function(t,e,n){e=[].concat(e);for(var r=e.length;r--;){var i=t["on"+e[r]];if("function"==typeof i)try{i.call(t,n||t)}catch(t){u(t)}}},h=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t},v=function(e,u,f){f||(e=h(e));var v,m,y,g=this,_=e.type,b=!1,w=function(){p(g,"writestart progress write writeend".split(" "))},x=function(){if(!b&&v||(v=n().createObjectURL(e)),m)m.location.href=v;else{var r=t.open(v,"_blank");void 0==r&&"undefined"!=typeof safari&&(t.location.href=v)}g.readyState=g.DONE,w(),d(v)},E=function(t){return function(){if(g.readyState!==g.DONE)return t.apply(this,arguments)}},k={create:!0,exclusive:!1};return g.readyState=g.INIT,u||(u="download"),i?(v=n().createObjectURL(e),r.href=v,r.download=u,void setTimeout(function(){o(r),w(),d(v),g.readyState=g.DONE})):(t.chrome&&_&&_!==c&&(y=e.slice||e.webkitSlice,e=y.call(e,0,e.size,c),b=!0),a&&"download"!==u&&(u+=".download"),(_===c||a)&&(m=t),s?(l+=e.size,void s(t.TEMPORARY,l,E(function(t){t.root.getDirectory("saved",k,E(function(t){var n=function(){t.getFile(u,k,E(function(t){t.createWriter(E(function(n){n.onwriteend=function(e){m.location.href=t.toURL(),g.readyState=g.DONE,p(g,"writeend",e),d(t)},n.onerror=function(){var t=n.error;t.code!==t.ABORT_ERR&&x()},"writestart progress write abort".split(" ").forEach(function(t){n["on"+t]=g["on"+t]}),n.write(e),g.abort=function(){n.abort(),g.readyState=g.DONE},g.readyState=g.WRITING}),x)}),x)};t.getFile(u,{create:!1},E(function(t){t.remove(),n()}),E(function(t){t.code===t.NOT_FOUND_ERR?n():x()}))}),x)}),x)):void x())},m=v.prototype,y=function(t,e,n){return new v(t,e,n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,n){return n||(t=h(t)),navigator.msSaveOrOpenBlob(t,e||"download")}:(m.abort=function(){var t=this;t.readyState=t.DONE,p(t,"abort")},m.readyState=m.INIT=0,m.WRITING=1,m.DONE=2,m.error=m.onwritestart=m.onprogress=m.onwrite=m.onabort=m.onerror=m.onwriteend=null,y)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof t&&t.exports?t.exports.saveAs=o:null!==n(31)&&null!=n(32)&&(r=[],i=function(){return o}.apply(e,r),!(void 0!==i&&(t.exports=i)))},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e){(function(e){t.exports=e}).call(e,{})},function(t,e,n){var r,i;/*!
	 * Unidragger v2.1.0
	 * Draggable base class
	 * MIT license
	 */
!function(o,a){r=[n(34)],i=function(t){return a(o,t)}.apply(e,r),!(void 0!==i&&(t.exports=i))}(window,function(t,e){"use strict";function n(){}function r(){}var i=r.prototype=Object.create(e.prototype);i.bindHandles=function(){this._bindHandles(!0)},i.unbindHandles=function(){this._bindHandles(!1)};var o=t.navigator;return i._bindHandles=function(t){t=void 0===t||!!t;var e;e=o.pointerEnabled?function(e){e.style.touchAction=t?"none":""}:o.msPointerEnabled?function(e){e.style.msTouchAction=t?"none":""}:n;for(var r=t?"addEventListener":"removeEventListener",i=0;i<this.handles.length;i++){var a=this.handles[i];this._bindStartEvent(a,t),e(a),a[r]("click",this)}},i.pointerDown=function(t,e){if("INPUT"==t.target.nodeName&&"range"==t.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(t,e);var n=document.activeElement;n&&n.blur&&n.blur(),this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])},i._dragPointerDown=function(t,n){this.pointerDownPoint=e.getPointerPoint(n);var r=this.canPreventDefaultOnPointerDown(t,n);r&&t.preventDefault()},i.canPreventDefaultOnPointerDown=function(t){return"SELECT"!=t.target.nodeName},i.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,n]),this._dragMove(t,e,n)},i._dragPointerMove=function(t,n){var r=e.getPointerPoint(n),i={x:r.x-this.pointerDownPoint.x,y:r.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(i)&&this._dragStart(t,n),i},i.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},i.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},i._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},i._dragStart=function(t,n){this.isDragging=!0,this.dragStartPoint=e.getPointerPoint(n),this.isPreventingClicks=!0,this.dragStart(t,n)},i.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},i._dragMove=function(t,e,n){this.isDragging&&this.dragMove(t,e,n)},i.dragMove=function(t,e,n){t.preventDefault(),this.emitEvent("dragMove",[t,e,n])},i._dragEnd=function(t,e){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(t,e)},i.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},i.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},i._staticClick=function(t,e){if(!this.isIgnoringMouseUp||"mouseup"!=t.type){var n=t.target.nodeName;"INPUT"!=n&&"TEXTAREA"!=n||t.target.focus(),this.staticClick(t,e),"mouseup"!=t.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400))}},i.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},r.getPointerPoint=e.getPointerPoint,r})},function(t,e,n){var r,i;/*!
	 * Unipointer v2.1.0
	 * base class for doing one thing with pointer event
	 * MIT license
	 */
!function(o,a){r=[n(35)],i=function(t){return a(o,t)}.apply(e,r),!(void 0!==i&&(t.exports=i))}(window,function(t,e){"use strict";function n(){}function r(){}var i=r.prototype=Object.create(e.prototype);i.bindStartEvent=function(t){this._bindStartEvent(t,!0)},i.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},i._bindStartEvent=function(e,n){n=void 0===n||!!n;var r=n?"addEventListener":"removeEventListener";t.navigator.pointerEnabled?e[r]("pointerdown",this):t.navigator.msPointerEnabled?e[r]("MSPointerDown",this):(e[r]("mousedown",this),e[r]("touchstart",this))},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.getTouch=function(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.identifier==this.pointerIdentifier)return n}},i.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},i.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},i.onMSPointerDown=i.onpointerdown=function(t){this._pointerDown(t,t)},i._pointerDown=function(t,e){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},i.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var o={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return i._bindPostStartEvents=function(e){if(e){var n=o[e.type];n.forEach(function(e){t.addEventListener(e,this)},this),this._boundPointerEvents=n}},i._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach(function(e){t.removeEventListener(e,this)},this),delete this._boundPointerEvents)},i.onmousemove=function(t){this._pointerMove(t,t)},i.onMSPointerMove=i.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},i.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},i._pointerMove=function(t,e){this.pointerMove(t,e)},i.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},i.onmouseup=function(t){this._pointerUp(t,t)},i.onMSPointerUp=i.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},i.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},i._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},i.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},i._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},i.pointerDone=n,i.onMSPointerCancel=i.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},i.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},i._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},i.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},r.getPointerPoint=function(t){return{x:t.pageX,y:t.pageY}},r})},function(t,e,n){var r,i;!function(o,a){r=a,i="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==i&&(t.exports=i))}("undefined"!=typeof window?window:this,function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},r=n[t]=n[t]||[];return r.indexOf(e)==-1&&r.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{},r=n[t]=n[t]||{};return r[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var r=n.indexOf(e);return r!=-1&&n.splice(r,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var r=0,i=n[r];e=e||[];for(var o=this._onceEvents&&this._onceEvents[t];i;){var a=o&&o[i];a&&(this.off(t,i),delete o[i]),i.apply(this,e),r+=a?0:1,i=n[r]}return this}},t})},function(t,e,n){var r;(function(i){!function(i,o){r=function(){return i.is=o()}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}(this,function(){function t(t){return function(){return!t.apply(null,l.call(arguments))}}function e(t){return function(){var e=l.call(arguments),n=e.length;1===n&&u.array(e[0])&&(e=e[0],n=e.length);for(var r=0;r<n;r++)if(!t.call(null,e[r]))return!1;return!0}}function n(t){return function(){var e=l.call(arguments),n=e.length;1===n&&u.array(e[0])&&(e=e[0],n=e.length);for(var r=0;r<n;r++)if(t.call(null,e[r]))return!0;return!1}}function r(t,e){u[t]=function(n){return e[t].test(n)}}function o(){var r=u;for(var i in r)if(f.call(r,i)&&u.function(r[i]))for(var o=r[i].api||["not","all","any"],a=0;a<o.length;a++)"not"===o[a]&&(u.not[i]=t(u[i])),"all"===o[a]&&(u.all[i]=e(u[i])),"any"===o[a]&&(u.any[i]=n(u[i]))}var a=this||i,s=a.is,u={};u.VERSION="0.8.0",u.not={},u.all={},u.any={};var c=Object.prototype.toString,l=Array.prototype.slice,f=Object.prototype.hasOwnProperty;u.arguments=function(t){return u.not.null(t)&&("[object Arguments]"===c.call(t)||"object"==typeof t&&"callee"in t)},u.array=Array.isArray||function(t){return"[object Array]"===c.call(t)},u.boolean=function(t){return t===!0||t===!1||"[object Boolean]"===c.call(t)},u.date=function(t){return"[object Date]"===c.call(t)},u.error=function(t){return"[object Error]"===c.call(t)},u.function=function(t){return"[object Function]"===c.call(t)||"function"==typeof t},u.nan=function(t){return t!==t},u.null=function(t){return null===t},u.number=function(t){return u.not.nan(t)&&"[object Number]"===c.call(t)},u.object=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},u.json=function(t){return"[object Object]"===c.call(t)},u.regexp=function(t){return"[object RegExp]"===c.call(t)},u.sameType=function(t,e){return u.nan(t)||u.nan(e)?u.nan(t)===u.nan(e):c.call(t)===c.call(e)},u.sameType.api=["not"],u.string=function(t){return"[object String]"===c.call(t)},u.char=function(t){return u.string(t)&&1===t.length},u.undefined=function(t){return void 0===t},u.empty=function(t){if(u.object(t)){var e=Object.getOwnPropertyNames(t).length;return!!(0===e||1===e&&u.array(t)||2===e&&u.arguments(t))}return""===t},u.existy=function(t){return null!==t&&void 0!==t},u.truthy=function(t){return u.existy(t)&&t!==!1&&u.not.nan(t)&&""!==t&&0!==t},u.falsy=t(u.truthy),u.space=function(t){if(u.char(t)){var e=t.charCodeAt(0);return e>8&&e<14||32===e}return!1},u.equal=function(t,e){return u.all.number(t,e)?t===e&&1/t===1/e:u.all.string(t,e)||u.all.regexp(t,e)?""+t==""+e:!!u.all.boolean(t,e)&&t===e},u.equal.api=["not"],u.even=function(t){return u.number(t)&&t%2===0},u.odd=function(t){return u.number(t)&&t%2===1},u.positive=function(t){return u.number(t)&&t>0},u.negative=function(t){return u.number(t)&&t<0},u.above=function(t,e){return u.all.number(t,e)&&t>e},u.above.api=["not"],u.under=function(t,e){return u.all.number(t,e)&&t<e},u.under.api=["not"],u.within=function(t,e,n){return u.all.number(t,e,n)&&t>e&&t<n},u.within.api=["not"],u.decimal=function(t){return u.number(t)&&t%1!==0},u.integer=function(t){return u.number(t)&&t%1===0},u.finite=isFinite||function(t){return t!==1/0&&t!==-(1/0)&&u.not.nan(t)},u.infinite=t(u.finite);var d={url:/^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/i,email:/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,creditCard:/^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/,alphaNumeric:/^[A-Za-z0-9]+$/,timeString:/^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$/,dateString:/^(1[0-2]|0?[1-9])\/(3[01]|[12][0-9]|0?[1-9])\/(?:[0-9]{2})?[0-9]{2}$/,usZipCode:/^[0-9]{5}(?:-[0-9]{4})?$/,caPostalCode:/^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s?[0-9][A-Z][0-9]$/,ukPostCode:/^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$/,nanpPhone:/^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,eppPhone:/^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/,socialSecurityNumber:/^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$/,affirmative:/^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)$/,hexadecimal:/^[0-9a-fA-F]+$/,hexColor:/^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/,ipv4:/^(?:(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$/,ipv6:/^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,ip:/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/};for(var p in d)d.hasOwnProperty(p)&&r(p,d);u.include=function(t,e){return t.indexOf(e)>-1},u.include.api=["not"],u.upperCase=function(t){return u.string(t)&&t===t.toUpperCase()},u.lowerCase=function(t){return u.string(t)&&t===t.toLowerCase()},u.startWith=function(t,e){return u.string(t)&&0===t.indexOf(e)},u.startWith.api=["not"],u.endWith=function(t,e){return u.string(t)&&t.indexOf(e)>-1&&t.indexOf(e)===t.length-e.length},u.endWith.api=["not"],u.capitalized=function(t){if(u.not.string(t))return!1;for(var e=t.split(" "),n=[],r=0;r<e.length;r++)n.push(e[r][0]===e[r][0].toUpperCase());return u.all.truthy.apply(null,n)},u.palindrome=function(t){return u.string(t)&&t==t.split("").reverse().join("")};var h=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"],v=["january","february","march","april","may","june","july","august","september","october","november","december"];if(u.today=function(t){var e=new Date,n=e.toDateString();return u.date(t)&&t.toDateString()===n},u.yesterday=function(t){var e=new Date,n=new Date(e.setDate(e.getDate()-1)).toDateString();return u.date(t)&&t.toDateString()===n},u.tomorrow=function(t){var e=new Date,n=new Date(e.setDate(e.getDate()+1)).toDateString();return u.date(t)&&t.toDateString()===n},u.past=function(t){var e=new Date;return u.date(t)&&t.getTime()<e.getTime()},u.future=t(u.past),u.day=function(t,e){return u.date(t)&&e.toLowerCase()===h[t.getDay()]},u.day.api=["not"],u.month=function(t,e){return u.date(t)&&e.toLowerCase()===v[t.getMonth()]},u.month.api=["not"],u.year=function(t,e){return u.date(t)&&u.number(e)&&e===t.getFullYear()},u.year.api=["not"],u.leapYear=function(t){return u.number(t)&&(t%4===0&&t%100!==0||t%400===0)},u.weekend=function(t){return u.date(t)&&(6===t.getDay()||0===t.getDay())},u.weekday=t(u.weekend),u.inDateRange=function(t,e,n){if(u.not.date(t)||u.not.date(e)||u.not.date(n))return!1;var r=t.getTime(),i=e.getTime(),o=n.getTime();return r>i&&r<o},u.inDateRange.api=["not"],u.inLastWeek=function(t){return u.inDateRange(t,new Date((new Date).setDate((new Date).getDate()-7)),new Date)},u.inLastMonth=function(t){return u.inDateRange(t,new Date((new Date).setMonth((new Date).getMonth()-1)),new Date)},u.inLastYear=function(t){return u.inDateRange(t,new Date((new Date).setFullYear((new Date).getFullYear()-1)),new Date)},u.inNextWeek=function(t){return u.inDateRange(t,new Date,new Date((new Date).setDate((new Date).getDate()+7)))},u.inNextMonth=function(t){return u.inDateRange(t,new Date,new Date((new Date).setMonth((new Date).getMonth()+1)))},u.inNextYear=function(t){return u.inDateRange(t,new Date,new Date((new Date).setFullYear((new Date).getFullYear()+1)))},u.quarterOfYear=function(t,e){return u.date(t)&&u.number(e)&&e===Math.floor((t.getMonth()+3)/3)},u.quarterOfYear.api=["not"],u.dayLightSavingTime=function(t){var e=new Date(t.getFullYear(),0,1),n=new Date(t.getFullYear(),6,1),r=Math.max(e.getTimezoneOffset(),n.getTimezoneOffset());return t.getTimezoneOffset()<r},"undefined"!=typeof window){var m="navigator"in window&&"userAgent"in navigator&&navigator.userAgent.toLowerCase()||"",y="navigator"in window&&"vendor"in navigator&&navigator.vendor.toLowerCase()||"",g="navigator"in window&&"appVersion"in navigator&&navigator.appVersion.toLowerCase()||"";u.chrome=function(){return/chrome|chromium/i.test(m)&&/google inc/.test(y)},u.chrome.api=["not"],u.firefox=function(){return/firefox/i.test(m)},u.firefox.api=["not"],u.edge=function(){return/edge/i.test(m)},u.edge.api=["not"],u.ie=function(t){return t?t>=11?"ActiveXObject"in window:new RegExp("msie "+t).test(m):/msie/i.test(m)||"ActiveXObject"in window},u.ie.api=["not"],u.opera=function(){return/^Opera\//.test(m)||/\x20OPR\//.test(m)},u.opera.api=["not"],u.safari=function(){return/safari/i.test(m)&&/apple computer/i.test(y)},u.safari.api=["not"],u.ios=function(){return u.iphone()||u.ipad()||u.ipod()},u.ios.api=["not"],u.iphone=function(){return/iphone/i.test(m)},u.iphone.api=["not"],u.ipad=function(){return/ipad/i.test(m)},u.ipad.api=["not"],u.ipod=function(){return/ipod/i.test(m)},u.ipod.api=["not"],u.android=function(){return/android/i.test(m)},u.android.api=["not"],u.androidPhone=function(){return/android/i.test(m)&&/mobile/i.test(m)},u.androidPhone.api=["not"],u.androidTablet=function(){return/android/i.test(m)&&!/mobile/i.test(m)},u.androidTablet.api=["not"],u.blackberry=function(){return/blackberry/i.test(m)||/BB10/i.test(m)},u.blackberry.api=["not"],u.desktop=function(){return u.not.mobile()&&u.not.tablet()},u.desktop.api=["not"],u.linux=function(){return/linux/i.test(g)},u.linux.api=["not"],u.mac=function(){return/mac/i.test(g)},u.mac.api=["not"],u.windows=function(){return/win/i.test(g)},u.windows.api=["not"],u.windowsPhone=function(){return u.windows()&&/phone/i.test(m)},u.windowsPhone.api=["not"],u.windowsTablet=function(){return u.windows()&&u.not.windowsPhone()&&/touch/i.test(m)},u.windowsTablet.api=["not"],u.mobile=function(){return u.iphone()||u.ipod()||u.androidPhone()||u.blackberry()||u.windowsPhone()},u.mobile.api=["not"],u.tablet=function(){return u.ipad()||u.androidTablet()||u.windowsTablet()},u.tablet.api=["not"],u.online=function(){return navigator.onLine},u.online.api=["not"],u.offline=t(u.online),u.offline.api=["not"],u.touchDevice=function(){return"ontouchstart"in window||"DocumentTouch"in window&&document instanceof DocumentTouch},u.touchDevice.api=["not"]}return u.propertyCount=function(t,e){if(!u.object(t)||!u.number(e))return!1;if(Object.keys)return Object.keys(t).length===e;var n,r=[];for(n in t)f.call(t,n)&&r.push(n);return r.length===e},u.propertyCount.api=["not"],u.propertyDefined=function(t,e){return u.object(t)&&u.string(e)&&e in t},u.propertyDefined.api=["not"],u.windowObject=function(t){return"object"==typeof t&&"setInterval"in t},u.domNode=function(t){return u.object(t)&&t.nodeType>0},u.inArray=function(t,e){if(u.not.array(e))return!1;for(var n=0;n<e.length;n++)if(e[n]===t)return!0;return!1},u.inArray.api=["not"],u.sorted=function(t){if(u.not.array(t))return!1;for(var e=0;e<t.length;e++)if(t[e]>t[e+1])return!1;return!0},o(),u.setRegexp=function(t,e){for(var n in d)f.call(d,n)&&e===n&&(d[n]=t)},u.setNamespace=function(){return a.is=s,this},u})}).call(e,function(){return this}())},function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString,i=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===r.call(t)},o=function(t){if(!t||"[object Object]"!==r.call(t))return!1;var e=n.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&n.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!e&&!i)return!1;var o;for(o in t);return"undefined"==typeof o||n.call(t,o)};t.exports=function t(){var e,n,r,a,s,u,c=arguments[0],l=1,f=arguments.length,d=!1;for("boolean"==typeof c?(d=c,c=arguments[1]||{},l=2):("object"!=typeof c&&"function"!=typeof c||null==c)&&(c={});l<f;++l)if(e=arguments[l],null!=e)for(n in e)r=c[n],a=e[n],c!==a&&(d&&a&&(o(a)||(s=i(a)))?(s?(s=!1,u=r&&i(r)?r:[]):u=r&&o(r)?r:{},c[n]=t(d,u,a)):"undefined"!=typeof a&&(c[n]=a));return c}},function(t,e,n){(function(e){var n=function(){"use strict";function t(n,r,i,o,l){function f(n,i){if(null===n)return null;if(0===i)return n;var v,m;if("object"!=typeof n)return n;if(n instanceof s)v=new s;else if(n instanceof u)v=new u;else if(n instanceof c)v=new c(function(t,e){n.then(function(e){t(f(e,i-1))},function(t){e(f(t,i-1))})});else if(t.__isArray(n))v=[];else if(t.__isRegExp(n))v=new RegExp(n.source,a(n)),n.lastIndex&&(v.lastIndex=n.lastIndex);else if(t.__isDate(n))v=new Date(n.getTime());else{if(h&&e.isBuffer(n))return v=new e(n.length),n.copy(v),v;n instanceof Error?v=Object.create(n):"undefined"==typeof o?(m=Object.getPrototypeOf(n),v=Object.create(m)):(v=Object.create(o),m=o)}if(r){var y=d.indexOf(n);if(y!=-1)return p[y];d.push(n),p.push(v)}if(n instanceof s)for(var g=n.keys();;){var _=g.next();if(_.done)break;var b=f(_.value,i-1),w=f(n.get(_.value),i-1);v.set(b,w)}if(n instanceof u)for(var x=n.keys();;){var _=x.next();if(_.done)break;var E=f(_.value,i-1);v.add(E)}for(var k in n){var A;m&&(A=Object.getOwnPropertyDescriptor(m,k)),A&&null==A.set||(v[k]=f(n[k],i-1))}if(Object.getOwnPropertySymbols)for(var O=Object.getOwnPropertySymbols(n),k=0;k<O.length;k++){var C=O[k],D=Object.getOwnPropertyDescriptor(n,C);(!D||D.enumerable||l)&&(v[C]=f(n[C],i-1),D.enumerable||Object.defineProperty(v,C,{enumerable:!1}))}if(l)for(var T=Object.getOwnPropertyNames(n),k=0;k<T.length;k++){var $=T[k],D=Object.getOwnPropertyDescriptor(n,$);D&&D.enumerable||(v[$]=f(n[$],i-1),Object.defineProperty(v,$,{enumerable:!1}))}return v}"object"==typeof r&&(i=r.depth,o=r.prototype,l=r.includeNonEnumerable,r=r.circular);var d=[],p=[],h="undefined"!=typeof e;return"undefined"==typeof r&&(r=!0),"undefined"==typeof i&&(i=1/0),f(n,i)}function n(t){return Object.prototype.toString.call(t)}function r(t){return"object"==typeof t&&"[object Date]"===n(t)}function i(t){return"object"==typeof t&&"[object Array]"===n(t)}function o(t){return"object"==typeof t&&"[object RegExp]"===n(t)}function a(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}var s;try{s=Map}catch(t){s=function(){}}var u;try{u=Set}catch(t){u=function(){}}var c;try{c=Promise}catch(t){c=function(){}}return t.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},t.__objToStr=n,t.__isDate=r,t.__isArray=i,t.__isRegExp=o,t.__getRegExpFlags=a,t}();"object"==typeof t&&t.exports&&(t.exports=n)}).call(e,n(39).Buffer)},function(t,e,n){(function(t,r){/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
"use strict";function i(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}function o(){return t.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,n){if(o()<n)throw new RangeError("Invalid typed array length");return t.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(n),e.__proto__=t.prototype):(null===e&&(e=new t(n)),e.length=n),e}function t(e,n,r){if(!(t.TYPED_ARRAY_SUPPORT||this instanceof t))return new t(e,n,r);if("number"==typeof e){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return s(this,e,n,r)}function s(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?p(t,e,n,r):"string"==typeof e?f(t,e,n):h(t,e)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t,e,n,r){return u(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}function l(e,n){if(u(n),e=a(e,n<0?0:0|v(n)),!t.TYPED_ARRAY_SUPPORT)for(var r=0;r<n;++r)e[r]=0;return e}function f(e,n,r){if("string"==typeof r&&""!==r||(r="utf8"),!t.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var i=0|y(n,r);e=a(e,i);var o=e.write(n,r);return o!==i&&(e=e.slice(0,o)),e}function d(t,e){var n=e.length<0?0:0|v(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(e,n,r,i){if(n.byteLength,r<0||n.byteLength<r)throw new RangeError("'offset' is out of bounds");if(n.byteLength<r+(i||0))throw new RangeError("'length' is out of bounds");return n=void 0===r&&void 0===i?new Uint8Array(n):void 0===i?new Uint8Array(n,r):new Uint8Array(n,r,i),t.TYPED_ARRAY_SUPPORT?(e=n,e.__proto__=t.prototype):e=d(e,n),e}function h(e,n){if(t.isBuffer(n)){var r=0|v(n.length);return e=a(e,r),0===e.length?e:(n.copy(e,0,0,r),e)}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||X(n.length)?a(e,0):d(e,n);if("Buffer"===n.type&&Q(n.data))return d(e,n.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function v(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function m(e){return+e!=e&&(e=0),t.alloc(+e)}function y(e,n){if(t.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var i=!1;;)switch(n){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return H(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return W(e).length;default:if(i)return H(e).length;n=(""+n).toLowerCase(),i=!0}}function g(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if(n>>>=0,e>>>=0,n<=e)return"";for(t||(t="utf8");;)switch(t){case"hex":return S(this,e,n);case"utf8":case"utf-8":return T(this,e,n);case"ascii":return F(this,e,n);case"latin1":case"binary":return P(this,e,n);case"base64":return D(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function _(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function b(e,n,r,i,o){if(0===e.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof n&&(n=t.from(n,i)),t.isBuffer(n))return 0===n.length?-1:w(e,n,r,i,o);if("number"==typeof n)return n&=255,t.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,n,r):Uint8Array.prototype.lastIndexOf.call(e,n,r):w(e,[n],r,i,o);throw new TypeError("val must be string, number or Buffer")}function w(t,e,n,r,i){function o(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}var a=1,s=t.length,u=e.length;if(void 0!==r&&(r=String(r).toLowerCase(),"ucs2"===r||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}var c;if(i){var l=-1;for(c=n;c<s;c++)if(o(t,c)===o(e,l===-1?0:c-l)){if(l===-1&&(l=c),c-l+1===u)return l*a}else l!==-1&&(c-=c-l),l=-1}else for(n+u>s&&(n=s-u),c=n;c>=0;c--){for(var f=!0,d=0;d<u;d++)if(o(t,c+d)!==o(e,d)){f=!1;break}if(f)return c}return-1}function x(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r),r>i&&(r=i)):r=i;var o=e.length;if(o%2!==0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function E(t,e,n,r){return G(H(e,t.length-n),t,n,r)}function k(t,e,n,r){return G(Z(e),t,n,r)}function A(t,e,n,r){return k(t,e,n,r)}function O(t,e,n,r){return G(W(e),t,n,r)}function C(t,e,n,r){return G(q(e,t.length-n),t,n,r)}function D(t,e,n){return 0===e&&n===t.length?K.fromByteArray(t):K.fromByteArray(t.slice(e,n))}function T(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o=t[i],a=null,s=o>239?4:o>223?3:o>191?2:1;if(i+s<=n){var u,c,l,f;switch(s){case 1:o<128&&(a=o);break;case 2:u=t[i+1],128===(192&u)&&(f=(31&o)<<6|63&u,f>127&&(a=f));break;case 3:u=t[i+1],c=t[i+2],128===(192&u)&&128===(192&c)&&(f=(15&o)<<12|(63&u)<<6|63&c,f>2047&&(f<55296||f>57343)&&(a=f));break;case 4:u=t[i+1],c=t[i+2],l=t[i+3],128===(192&u)&&128===(192&c)&&128===(192&l)&&(f=(15&o)<<18|(63&u)<<12|(63&c)<<6|63&l,f>65535&&f<1114112&&(a=f))}}null===a?(a=65533,s=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),i+=s}return $(r)}function $(t){var e=t.length;if(e<=tt)return String.fromCharCode.apply(String,t);for(var n="",r=0;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=tt));return n}function F(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function P(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function S(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=Y(t[o]);return i}function N(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function j(t,e,n){if(t%1!==0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function R(e,n,r,i,o,a){if(!t.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>o||n<a)throw new RangeError('"value" argument is out of bounds');if(r+i>e.length)throw new RangeError("Index out of range")}function L(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function I(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function M(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function U(t,e,n,r,i){return i||M(t,e,n,4,3.4028234663852886e38,-3.4028234663852886e38),J.write(t,e,n,r,23,4),n+4}function B(t,e,n,r,i){return i||M(t,e,n,8,1.7976931348623157e308,-1.7976931348623157e308),J.write(t,e,n,r,52,8),n+8}function V(t){if(t=z(t).replace(et,""),t.length<2)return"";for(;t.length%4!==0;)t+="=";return t}function z(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function Y(t){return t<16?"0"+t.toString(16):t.toString(16)}function H(t,e){e=e||1/0;for(var n,r=t.length,i=null,o=[],a=0;a<r;++a){if(n=t.charCodeAt(a),n>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=(i-55296<<10|n-56320)+65536}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function Z(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}function q(t,e){for(var n,r,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}function W(t){return K.toByteArray(V(t))}function G(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}function X(t){return t!==t}var K=n(40),J=n(41),Q=n(42);e.Buffer=t,e.SlowBuffer=m,e.INSPECT_MAX_BYTES=50,t.TYPED_ARRAY_SUPPORT=void 0!==r.TYPED_ARRAY_SUPPORT?r.TYPED_ARRAY_SUPPORT:i(),e.kMaxLength=o(),t.poolSize=8192,t._augment=function(e){return e.__proto__=t.prototype,e},t.from=function(t,e,n){return s(null,t,e,n)},t.TYPED_ARRAY_SUPPORT&&(t.prototype.__proto__=Uint8Array.prototype,t.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&t[Symbol.species]===t&&Object.defineProperty(t,Symbol.species,{value:null,configurable:!0})),t.alloc=function(t,e,n){return c(null,t,e,n)},t.allocUnsafe=function(t){return l(null,t)},t.allocUnsafeSlow=function(t){return l(null,t)},t.isBuffer=function(t){return!(null==t||!t._isBuffer)},t.compare=function(e,n){if(!t.isBuffer(e)||!t.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(e===n)return 0;for(var r=e.length,i=n.length,o=0,a=Math.min(r,i);o<a;++o)if(e[o]!==n[o]){r=e[o],i=n[o];break}return r<i?-1:i<r?1:0},t.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},t.concat=function(e,n){if(!Q(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return t.alloc(0);var r;if(void 0===n)for(n=0,r=0;r<e.length;++r)n+=e[r].length;var i=t.allocUnsafe(n),o=0;for(r=0;r<e.length;++r){var a=e[r];if(!t.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,o),o+=a.length}return i},t.byteLength=y,t.prototype._isBuffer=!0,t.prototype.swap16=function(){var t=this.length;if(t%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)_(this,e,e+1);return this},t.prototype.swap32=function(){var t=this.length;if(t%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)_(this,e,e+3),_(this,e+1,e+2);return this},t.prototype.swap64=function(){var t=this.length;if(t%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)_(this,e,e+7),_(this,e+1,e+6),_(this,e+2,e+5),_(this,e+3,e+4);return this},t.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?T(this,0,t):g.apply(this,arguments)},t.prototype.equals=function(e){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===t.compare(this,e)},t.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},t.prototype.compare=function(e,n,r,i,o){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===r&&(r=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),n<0||r>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&n>=r)return 0;if(i>=o)return-1;if(n>=r)return 1;if(n>>>=0,r>>>=0,i>>>=0,o>>>=0,this===e)return 0;for(var a=o-i,s=r-n,u=Math.min(a,s),c=this.slice(i,o),l=e.slice(n,r),f=0;f<u;++f)if(c[f]!==l[f]){a=c[f],s=l[f];break}return a<s?-1:s<a?1:0},t.prototype.includes=function(t,e,n){return this.indexOf(t,e,n)!==-1},t.prototype.indexOf=function(t,e,n){return b(this,t,e,n,!0)},t.prototype.lastIndexOf=function(t,e,n){return b(this,t,e,n,!1)},t.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return x(this,t,e,n);case"utf8":case"utf-8":return E(this,t,e,n);case"ascii":return k(this,t,e,n);case"latin1":case"binary":return A(this,t,e,n);case"base64":return O(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},t.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var tt=4096;t.prototype.slice=function(e,n){var r=this.length;e=~~e,n=void 0===n?r:~~n,e<0?(e+=r,e<0&&(e=0)):e>r&&(e=r),n<0?(n+=r,n<0&&(n=0)):n>r&&(n=r),n<e&&(n=e);var i;if(t.TYPED_ARRAY_SUPPORT)i=this.subarray(e,n),i.__proto__=t.prototype;else{var o=n-e;i=new t(o,void 0);for(var a=0;a<o;++a)i[a]=this[a+e]}return i},t.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},t.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},t.prototype.readUInt8=function(t,e){return e||j(t,1,this.length),this[t]},t.prototype.readUInt16LE=function(t,e){return e||j(t,2,this.length),this[t]|this[t+1]<<8},t.prototype.readUInt16BE=function(t,e){return e||j(t,2,this.length),this[t]<<8|this[t+1]},t.prototype.readUInt32LE=function(t,e){return e||j(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},t.prototype.readUInt32BE=function(t,e){return e||j(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},t.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*e)),r},t.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},t.prototype.readInt8=function(t,e){return e||j(t,1,this.length),128&this[t]?(255-this[t]+1)*-1:this[t]},t.prototype.readInt16LE=function(t,e){e||j(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},t.prototype.readInt16BE=function(t,e){e||j(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},t.prototype.readInt32LE=function(t,e){return e||j(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},t.prototype.readInt32BE=function(t,e){return e||j(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},t.prototype.readFloatLE=function(t,e){return e||j(t,4,this.length),J.read(this,t,!0,23,4)},t.prototype.readFloatBE=function(t,e){return e||j(t,4,this.length),J.read(this,t,!1,23,4)},t.prototype.readDoubleLE=function(t,e){return e||j(t,8,this.length),J.read(this,t,!0,52,8)},t.prototype.readDoubleBE=function(t,e){return e||j(t,8,this.length),J.read(this,t,!1,52,8)},t.prototype.writeUIntLE=function(t,e,n,r){if(t=+t,e|=0,n|=0,!r){var i=Math.pow(2,8*n)-1;R(this,t,e,n,i,0)}var o=1,a=0;for(this[e]=255&t;++a<n&&(o*=256);)this[e+a]=t/o&255;return e+n},t.prototype.writeUIntBE=function(t,e,n,r){if(t=+t,e|=0,n|=0,!r){var i=Math.pow(2,8*n)-1;R(this,t,e,n,i,0)}var o=n-1,a=1;for(this[e+o]=255&t;--o>=0&&(a*=256);)this[e+o]=t/a&255;return e+n},t.prototype.writeUInt8=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,1,255,0),t.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[n]=255&e,n+1},t.prototype.writeUInt16LE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,2,65535,0),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):L(this,e,n,!0),n+2},t.prototype.writeUInt16BE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,2,65535,0),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):L(this,e,n,!1),n+2},t.prototype.writeUInt32LE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,4,4294967295,0),t.TYPED_ARRAY_SUPPORT?(this[n+3]=e>>>24,this[n+2]=e>>>16,this[n+1]=e>>>8,this[n]=255&e):I(this,e,n,!0),n+4},t.prototype.writeUInt32BE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,4,4294967295,0),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):I(this,e,n,!1),n+4},t.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);R(this,t,e,n,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<n&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},t.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);R(this,t,e,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},t.prototype.writeInt8=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,1,127,-128),t.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[n]=255&e,n+1},t.prototype.writeInt16LE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,2,32767,-32768),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8):L(this,e,n,!0),n+2},t.prototype.writeInt16BE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,2,32767,-32768),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>8,this[n+1]=255&e):L(this,e,n,!1),n+2},t.prototype.writeInt32LE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,4,2147483647,-2147483648),t.TYPED_ARRAY_SUPPORT?(this[n]=255&e,this[n+1]=e>>>8,this[n+2]=e>>>16,this[n+3]=e>>>24):I(this,e,n,!0),n+4},t.prototype.writeInt32BE=function(e,n,r){return e=+e,n|=0,r||R(this,e,n,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),t.TYPED_ARRAY_SUPPORT?(this[n]=e>>>24,this[n+1]=e>>>16,this[n+2]=e>>>8,this[n+3]=255&e):I(this,e,n,!1),n+4},t.prototype.writeFloatLE=function(t,e,n){return U(this,t,e,!0,n)},t.prototype.writeFloatBE=function(t,e,n){return U(this,t,e,!1,n)},t.prototype.writeDoubleLE=function(t,e,n){return B(this,t,e,!0,n)},t.prototype.writeDoubleBE=function(t,e,n){return B(this,t,e,!1,n)},t.prototype.copy=function(e,n,r,i){if(r||(r=0),i||0===i||(i=this.length),n>=e.length&&(n=e.length),n||(n=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===e.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-n<i-r&&(i=e.length-n+r);var o,a=i-r;if(this===e&&r<n&&n<i)for(o=a-1;o>=0;--o)e[o+n]=this[o+r];else if(a<1e3||!t.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+n]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),n);return a},t.prototype.fill=function(e,n,r,i){if("string"==typeof e){if("string"==typeof n?(i=n,n=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!t.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(n<0||this.length<n||this.length<r)throw new RangeError("Out of range index");if(r<=n)return this;n>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0);var a;if("number"==typeof e)for(a=n;a<r;++a)this[a]=e;else{var s=t.isBuffer(e)?e:H(new t(e,i).toString()),u=s.length;for(a=0;a<r-n;++a)this[a+n]=s[a%u]}return this};var et=/[^+\/0-9A-Za-z-_]/g}).call(e,n(39).Buffer,function(){return this}())},function(t,e){"use strict";function n(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function r(t){return 3*t.length/4-n(t)}function i(t){var e,r,i,o,a,s,u=t.length;a=n(t),s=new l(3*u/4-a),i=a>0?u-4:u;var f=0;for(e=0,r=0;e<i;e+=4,r+=3)o=c[t.charCodeAt(e)]<<18|c[t.charCodeAt(e+1)]<<12|c[t.charCodeAt(e+2)]<<6|c[t.charCodeAt(e+3)],s[f++]=o>>16&255,s[f++]=o>>8&255,s[f++]=255&o;return 2===a?(o=c[t.charCodeAt(e)]<<2|c[t.charCodeAt(e+1)]>>4,s[f++]=255&o):1===a&&(o=c[t.charCodeAt(e)]<<10|c[t.charCodeAt(e+1)]<<4|c[t.charCodeAt(e+2)]>>2,s[f++]=o>>8&255,s[f++]=255&o),s}function o(t){return u[t>>18&63]+u[t>>12&63]+u[t>>6&63]+u[63&t]}function a(t,e,n){for(var r,i=[],a=e;a<n;a+=3)r=(t[a]<<16)+(t[a+1]<<8)+t[a+2],i.push(o(r));return i.join("")}function s(t){for(var e,n=t.length,r=n%3,i="",o=[],s=16383,c=0,l=n-r;c<l;c+=s)o.push(a(t,c,c+s>l?l:c+s));return 1===r?(e=t[n-1],i+=u[e>>2],i+=u[e<<4&63],i+="=="):2===r&&(e=(t[n-2]<<8)+t[n-1],i+=u[e>>10],i+=u[e>>4&63],i+=u[e<<2&63],i+="="),o.push(i),o.join("")}e.byteLength=r,e.toByteArray=i,e.fromByteArray=s;for(var u=[],c=[],l="undefined"!=typeof Uint8Array?Uint8Array:Array,f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",d=0,p=f.length;d<p;++d)u[d]=f[d],c[f.charCodeAt(d)]=d;c["-".charCodeAt(0)]=62,c["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,a,s=8*i-r-1,u=(1<<s)-1,c=u>>1,l=-7,f=n?i-1:0,d=n?-1:1,p=t[e+f];for(f+=d,o=p&(1<<-l)-1,p>>=-l,l+=s;l>0;o=256*o+t[e+f],f+=d,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=r;l>0;a=256*a+t[e+f],f+=d,l-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:(p?-1:1)*(1/0);a+=Math.pow(2,r),o-=c}return(p?-1:1)*a*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var a,s,u,c=8*o-i-1,l=(1<<c)-1,f=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,h=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),e+=a+f>=1?d/u:d*Math.pow(2,1-f),e*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(e*u-1)*Math.pow(2,i),a+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;t[n+p]=255&s,p+=h,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;t[n+p]=255&a,p+=h,a/=256,c-=8);t[n+p-h]|=128*v}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{ref:"bar",staticClass:"bar",on:{click:t.click}},[t._h("div",{staticClass:"wrap"},[t._h("div",{staticClass:"value",style:{width:100*t.selfValue+"%"}})])," ",t._h("div",{ref:"thumb",staticClass:"thumb",style:{left:100*t.selfValue+"%"}})])},staticRenderFns:[]}},function(t,e,n){var r,i;n(45),r=n(47);var o=n(49);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,t.exports=r},function(t,e,n){var r=n(46);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,"",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(28),o=n(48),a=r(o);e.default={data:function(){return{remain:a.default.timeRemain}},props:{duration:{default:0,type:Number},currentTime:{default:0,type:Number}},filters:{time:function(t){return(0,i.timestamp2timestr)(t,!0)}},watch:{remain:function(t){a.default.timeRemain=t}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(28),i={lrcFormat:{},lyric:{},editing:{default:!0},lyricArray:{default:[]},timeRemain:{default:!1},userName:{default:""}},o={};Object.keys(i).forEach(function(t){var e=i[t];o[t]=r.cache.get(e.name||t,e.default||"")}),e.default=new Proxy(o,{set:function(t,e,n){var o=i[e];return r.cache.set(o.name||e,n),t[e]=n,!0}})},function(t,e){t.exports={render:function(){var t=this;return t._h("div",[t._h("span",{on:{click:function(e){t.remain=!t.remain}}},[t.remain?["\n      -"+t._s(t._f("time")(t.duration-t.currentTime))+"\n    "]:["\n      "+t._s(t._f("time")(t.currentTime))+"\n    "]," "]),"\n  / "+t._s(t._f("time")(t.duration))+"\n"])},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{directives:[{name:"show",rawName:"v-show",value:t.src.length,expression:"src.length"}],staticClass:"root",class:{mobile:t.isMobile},on:{mouseover:function(e){t.hover=!0},mouseleave:function(e){t.hover=!1}}},[t._h("div",{staticClass:"player"},[t._h("div",{staticClass:"ctrl-btn",attrs:{title:"[SPACE]"},on:{click:function(e){t.paused=!t.paused}}},[t.paused?t._h("i",{staticClass:"icon-play"}):t._h("i",{staticClass:"icon-pause"})," "])," ",t._h("div",{staticClass:"ctrl-btn",attrs:{title:"[LEFT]"},on:{click:function(e){t.$emit("backward")}}},[t._h("i",{staticClass:"icon-backward"})])," ",t._h("div",{staticClass:"ctrl-btn",attrs:{title:"[RIGHT]"},on:{click:function(e){t.$emit("forward")}}},[t._h("i",{staticClass:"icon-forward"})])," ",t._h("range",{ref:"musicRange",staticClass:"range music",attrs:{value:t.process},on:{seek:t.seek}})," ",t.isMobile?t._e():t._h("time-panel",{attrs:{duration:t.duration,"current-time":t.currentTime}})])," ",t._h("transition",{attrs:{name:"player-more"}},[t._h("div",{directives:[{name:"show",rawName:"v-show",value:t.isMobile||t.hover,expression:"isMobile || hover"}],staticClass:"more"},[t.isMobile?t._h("time-panel",{attrs:{duration:t.duration,"current-time":t.currentTime}}):t._e()," ",t._h("div",{staticClass:"sound"},[t._h("div",{staticClass:"ctrl-btn",on:{click:function(e){t.muted=!t.muted}}},[t.muted||0==t.volume?t._h("i",{staticClass:"icon-volume-off"}):t._h("i",{staticClass:"icon-volume-up"})," "])," ",t._h("range",{ref:"soundRange",staticClass:"range volume",attrs:{value:t.volume},on:{seek:t.volumeSeek,"drag-seek":t.volumeSeek}})])])])])},staticRenderFns:[]}},function(t,e,n){var r,i;n(52),r=n(54);var o=n(72);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-1cacf53d",t.exports=r},function(t,e,n){var r=n(53);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,"ul.lyrics[data-v-1cacf53d]{list-style-type:none;margin:0;padding:0;background-color:#f1f1f1}ul.lyrics>li[data-v-1cacf53d]{min-height:40px;text-align:center;color:#044d98;padding:10px 0}ul.lyrics>li.cur[data-v-1cacf53d]{color:#044d98;text-shadow:1px 1px 1px #aaa;background-color:#fbfbfb}ul.lyrics>li:hover .conceal[data-v-1cacf53d]{display:inline-block}ul.lyrics>li .conceal[data-v-1cacf53d]{display:none}ul.lyrics>li.division[data-v-1cacf53d],ul.lyrics>li.unsorted[data-v-1cacf53d]{background-color:#f1f1f1}ul.lyrics>li.division[data-v-1cacf53d]{display:block;width:100%;min-height:auto;padding:2px 0;font-size:12px;text-align:center}ul.lyrics.editing>li[data-v-1cacf53d]{padding:0;display:-ms-flexbox;display:flex}ul.lyrics.editing>li.division[data-v-1cacf53d]{display:block;padding:4px 0}ul.lyrics.editing>li .timestamp[data-v-1cacf53d]{color:#7c9fbb;width:60px;overflow:hidden;text-overflow:'.'}ul.lyrics.editing>li .content[data-v-1cacf53d]{-ms-flex:1;flex:1}ul.lyrics.editing>li .icon-btn[data-v-1cacf53d]{padding-left:4px;padding-right:4px}ul.lyrics.editing>li .content[data-v-1cacf53d],ul.lyrics.editing>li .icon-btn[data-v-1cacf53d],ul.lyrics.editing>li .timestamp[data-v-1cacf53d]{padding-top:10px;padding-bottom:10px}ul.lyrics.editing>li input[data-v-1cacf53d]{text-align:center;border:none;background-color:#d0dae4}",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}Object.defineProperty(e,"__esModule",{value:!0});var o=n(55),a=n(28),s=n(48),u=r(s),c=n(60),l=r(c);e.default={data:function(){return{index:-1,editingIndex:-1,editingTextIndex:-1,scroller:null}},props:{runner:{type:o.Runner,default:new o.Runner},playto:{type:Function,default:function(){}},editing:{type:Boolean,default:u.default.editing},lyricArray:{type:Array,default:[]}},methods:{editMenu:function(t){},exitEdit:function(){this.editingIndex=-1,this.editingTextIndex=-1,this.$emit("update")},edit:function(t){this.editingIndex=t},editText:function(t){this.editingTextIndex=t,this.$emit("update")},remove:function(t){this.runner.lrc.lyrics.splice(t,1),this.$emit("update")},removeText:function(t){this.lyricArray.splice(t,1),this.$emit("update")},insert:function(t){this.runner.lrc.lyrics.splice(t+1,0,{timestamp:this.runner.lrc.lyrics[t].timestamp,content:this.runner.lrc.lyrics[t].content}),this.$emit("update")},insertText:function(t){this.lyricArray.splice(t+1,0,this.lyricArray[t]),this.$emit("update")},removeTimestamp:function(t){var e,n=this.runner.lrc.lyrics,r=n.splice(t,n.length-t).map(function(t){return t.content});(e=this.lyricArray).splice.apply(e,[0,0].concat(i(r))),this.$emit("update")},setTimestamp:function(t){var e=this.$parent.$refs.player.currentTime;0!==e&&(this.runner.lrc.lyrics[t].timestamp=e,this.$emit("update"))},setTimestampText:function(t){var e=this.$parent.$refs.player.currentTime;0!==e&&this.lyricArray.length&&(this.runner.lrc.lyrics.push({timestamp:e,content:this.lyricArray[t]}),this.removeText(t),this.$emit("update"))},scrollToCurrentLyric:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=this.$el,n=e.querySelector(".cur");if(n){var r=e.clientHeight,i=n.offsetTop-r/2;this.scroller.scrollTo(i,t)}}},filters:{time:a.timestamp2timestr},created:function(){var t=this;this.$on("timeupdate",function(e){t.runner.timeUpdate(e),t.index=t.runner.curIndex(),t.scrollToCurrentLyric()}).$on("update",function(){t.runner.lrcUpdate(),$App.lrcFormat=t.runner.lrc.toString(),$App.lyricArray=t.lyricArray}).$on("prevlyric",function(){t.removeTimestamp(t.runner.lrc.lyrics.length-1)}).$on("nextlyric",function(){t.setTimestampText(0)})},mounted:function(){var t=this;this.scroller=new a.Scroller(this.$el),a.globalKeydown.on(["enter","escape"],function(){if(t.editing)return t.exitEdit(),!1}).on("arrowup",function(){if(t.editing)return t.$emit("prevlyric"),!1}).on("arrowdown",function(){if(t.editing)return t.$emit("nextlyric"),!1})},watch:{editing:function(){this.editing||this.exitEdit()}},components:{Tmenu:l.default}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Runner=e.Lrc=e.LineParser=void 0;var i=n(56),o=r(i),a=n(57),s=r(a),u=n(58),c=r(u);e.LineParser=o.default,e.Lrc=s.default,e.Runner=c.default},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(e){n(this,t),this.type=t.TYPE.INVALID;try{var i=t.parseTags(e),o=r(i,2),a=o[0],s=o[1];t.TIME_REGEXP.test(a[0])?this.parseAsTime(a,s):t.INFO_REGEXP.test(a[0])?this.parseAsInfo(a[0]):this.type=t.TYPE.INVALID}catch(e){this.type=t.TYPE.INVALID}}return i(t,null,[{key:"parseTags",value:function(e){e=e.trim();var n=t.TAGS_REGEXP.exec(e),r=n[0],i=e.substr(r.length);return[r.slice(1,-1).split(/\]\s*\[/),i]}}]),i(t,[{key:"parseAsTime",value:function(e,n){var r=[];e.forEach(function(e){
var n=t.TIME_REGEXP.exec(e),i=parseFloat(n[1]),o=parseFloat(n[2].replace(/\s+/g,"").replace(":","."));r.push(60*i+o)}),this.timestamps=r,this.content=n.trim(),this.type=t.TYPE.TIME}},{key:"parseAsInfo",value:function(e){var n=t.INFO_REGEXP.exec(e);this.key=n[1].trim(),this.value=n[2].trim(),this.type=t.TYPE.INFO}}]),t}();o.TAGS_REGEXP=/^(\[.+\])+/,o.INFO_REGEXP=/^\s*(\w+)\s*:(.*)$/,o.TIME_REGEXP=/^\s*(\d+)\s*:\s*(\d+(\s*[\.:]\s*\d+)?)\s*$/,o.TYPE={INVALID:0,INFO:1,TIME:2},e.default=o},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(36),s=r(a),u=n(56),c=r(u),l=function(){function t(){i(this,t),this.info={},this.lyrics=[]}return o(t,[{key:"offset",value:function(t){this.lyrics.forEach(function(e){e.timestamp+=t,e.timestamp<0&&(e.timestamp=0)})}},{key:"toString",value:function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];e.combine=!("combine"in e)||e.combine,e.lineFormat="lineFormat"in e?e.lineFormat:"\r\n",e.sort=!("sort"in e)||e.sort;var n=[],r={},i=[];for(var o in this.info)n.push("["+o+":"+this.info[o]+"]");if(e.combine){this.lyrics.forEach(function(t){t.content in r?r[t.content].push(t.timestamp):r[t.content]=[t.timestamp]});for(var a in r)e.sort&&r[a].sort(),i.push({timestamps:r[a],content:a});e.sort&&i.sort(function(t,e){return t.timestamps[0]-e.timestamps[0]}),i.forEach(function(e){n.push("["+e.timestamps.map(function(e){return t.timestampToString(e)}).join("][")+"]"+(e.content||""))})}else this.lyrics.forEach(function(e){n.push("["+t.timestampToString(e.timestamp)+"]"+(e.content||""))});return n.join(e.lineFormat)}}],[{key:"parse",value:function(t){var e=[],n={};t.split(/\r\n|[\n\r]/g).map(function(t){return new c.default(t)}).forEach(function(t){switch(t.type){case c.default.TYPE.INFO:n[t.key]=t.value;break;case c.default.TYPE.TIME:t.timestamps.forEach(function(n){e.push({timestamp:n,content:t.content})})}});var r=new this;return r.lyrics=e,r.info=n,r}},{key:"checkLyricObject",value:function(t){return s.default.object(t)&&"timestamp"in t&&s.default.number(t.timestamp)&&"content"in t&&s.default.string(t.content)}},{key:"padZero",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?2:arguments[1];for(s.default.number(t)&&(t=t.toString());t.split(".")[0].length<e;)t="0"+t;return t}},{key:"timestampToString",value:function(t){return this.padZero(parseInt(t/60))+":"+this.padZero((t%60).toFixed(2))}}]),t}();e.default=l},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(57),s=r(a),u=n(59),c=r(u),l=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?new s.default:arguments[0],n=arguments.length<=1||void 0===arguments[1]||arguments[1];i(this,t),this.offset=n,this._currentIndex=-1,this.setLrc(e)}return o(t,[{key:"setLrc",value:function(t){this.lrc=(0,c.default)(t),this.lrcUpdate()}},{key:"lrcUpdate",value:function(){this.offset&&this._offsetAlign(),this._sort()}},{key:"_offsetAlign",value:function(){if("offset"in this.lrc.info){var t=parseInt(this.lrc.info.offset)/1e3;isNaN(t)||(this.lrc.offset(t),delete this.lrc.info.offset)}}},{key:"_sort",value:function(){this.lrc.lyrics.sort(function(t,e){return t.timestamp-e.timestamp})}},{key:"timeUpdate",value:function(t){this._currentIndex>=this.lrc.lyrics.length?this._currentIndex=this.lrc.lyrics.length-1:this._currentIndex<-1&&(this._currentIndex=-1),this._currentIndex=this._findIndex(t,this._currentIndex)}},{key:"_findIndex",value:function(t,e){var n=e==-1?Number.NEGATIVE_INFINITY:this.lrc.lyrics[e].timestamp,r=e==this.lrc.lyrics.length-1?Number.POSITIVE_INFINITY:this.lrc.lyrics[e+1].timestamp;return t<n?this._findIndex(t,e-1):t===r?r===Number.POSITIVE_INFINITY?e:e+1:t>r?this._findIndex(t,e+1):e}},{key:"getInfo",value:function(){return this.lrc.info}},{key:"getLyrics",value:function(){return this.lrc.lyrics}},{key:"getLyric",value:function(){var t=arguments.length<=0||void 0===arguments[0]?this.curIndex():arguments[0];if(t>=0&&t<=this.lrc.lyrics.length-1)return this.lrc.lyrics[t];throw new Error("Index not exist")}},{key:"curIndex",value:function(){return this._currentIndex}},{key:"curLyric",value:function(){return this.getLyric()}}]),t}();e.default=l},function(t,e,n){(function(e){var n=function(){"use strict";function t(n,r,i,o){function s(n,i){if(null===n)return null;if(0==i)return n;var u,d;if("object"!=typeof n)return n;if(t.__isArray(n))u=[];else if(t.__isRegExp(n))u=new RegExp(n.source,a(n)),n.lastIndex&&(u.lastIndex=n.lastIndex);else if(t.__isDate(n))u=new Date(n.getTime());else{if(f&&e.isBuffer(n))return u=new e(n.length),n.copy(u),u;"undefined"==typeof o?(d=Object.getPrototypeOf(n),u=Object.create(d)):(u=Object.create(o),d=o)}if(r){var p=c.indexOf(n);if(p!=-1)return l[p];c.push(n),l.push(u)}for(var h in n){var v;d&&(v=Object.getOwnPropertyDescriptor(d,h)),v&&null==v.set||(u[h]=s(n[h],i-1))}return u}var u;"object"==typeof r&&(i=r.depth,o=r.prototype,u=r.filter,r=r.circular);var c=[],l=[],f="undefined"!=typeof e;return"undefined"==typeof r&&(r=!0),"undefined"==typeof i&&(i=1/0),s(n,i)}function n(t){return Object.prototype.toString.call(t)}function r(t){return"object"==typeof t&&"[object Date]"===n(t)}function i(t){return"object"==typeof t&&"[object Array]"===n(t)}function o(t){return"object"==typeof t&&"[object RegExp]"===n(t)}function a(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return t.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},t.__objToStr=n,t.__isDate=r,t.__isArray=i,t.__isRegExp=o,t.__getRegExpFlags=a,t}();"object"==typeof t&&t.exports&&(t.exports=n)}).call(e,n(39).Buffer)},function(t,e,n){var r,i;n(61),n(63),r=n(65);var o=n(71);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-eee4cabe",t.exports=r},function(t,e,n){var r=n(62);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,"span[data-v-eee4cabe]{position:relative}",""])},function(t,e,n){var r=n(64);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".menu{display:inline-block;position:relative}.menu ul{list-style-type:none;margin:0;padding:0}.menu ul li{white-space:nowrap;height:25px;line-height:25px;text-align:left;background-color:#fff;color:#1161b3;cursor:pointer}.menu ul li:hover{color:#1161b3;background-color:#e8e1e1}",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(66),o=r(i);e.default={data:function(){return{dir:!1}},components:{Tooltip:o.default}}},function(t,e,n){var r,i;n(67),r=n(69);var o=n(70);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,t.exports=r},function(t,e,n){var r=n(68);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".tooltip .wrap{padding:8px;position:fixed;z-index:100;background-color:#fff;color:#1161b3;border-radius:8px;box-shadow:.5px .5px 3px .5px #ccc}.tooltip .wrap .arrow{position:absolute;width:0;height:0;display:block;margin:auto}.tooltip .wrap .arrow.left{top:0;bottom:0;right:-16px;border:8px solid transparent;border-left:8px solid #fff}.tooltip .wrap .arrow.right{top:0;bottom:0;left:-16px;border:8px solid transparent;border-right:8px solid #fff}.tooltip .wrap .arrow.top{left:0;right:0;bottom:-16px;border:8px solid transparent;border-top:8px solid #fff}.tooltip .wrap .arrow.bottom{left:0;right:0;top:-16px;border:8px solid transparent;border-bottom:8px solid #fff}",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(28),o=n(37),a=r(o);e.default={data:function(){return{style:{top:0,left:0,visibility:"hidden"},show:!1,dir:!1}},props:{enterDelay:{type:Number,default:.1},leaveDelay:{type:Number,default:.5},target:{type:Element,default:null}},mounted:function(){var t=this,e=null!==this.target?this.target:this.$el,n=new i.TooltipPosition(e,this.$refs.wrap),r=10,o=new i.DelayHover(e,{enterDelay:this.enterDelay,leaveDelay:this.leaveDelay});o.hover(function(){var e=n.position();switch(t.dir=e.dir,t.dir){case"left":(0,a.default)(t.style,{top:e.rect.top+"px",left:e.rect.left-r+"px"});break;case"right":(0,a.default)(t.style,{top:e.rect.top+"px",left:e.rect.left+r+"px"});break;case"top":(0,a.default)(t.style,{top:e.rect.top-r+"px",left:e.rect.left+"px"});break;case"bottom":(0,a.default)(t.style,{top:e.rect.top+r+"px",left:e.rect.left+"px"});break;case!1:return}t.show=!0},function(){t.show=!1})},watch:{show:{immediate:!0,handler:function(){this.style.visibility=this.show?"visible":"hidden"}}}}},function(t,e){t.exports={render:function(){var t=this;return t._h("span",{staticClass:"tooltip"},[t._t("target")," ",t._h("div",{ref:"wrap",staticClass:"wrap",style:t.style},[t._h("div",{class:"arrow "+t.dir})," ",t._h("div",{staticClass:"content"},[t._t("content")])])])},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{ref:"menu",staticClass:"menu"},[t._h("tooltip",{attrs:{dir:t.dir,target:t.$refs.menu,"enter-delay":0}},[t._h("div",{slot:"target"},[t._t("target")])," ",t._h("div",{slot:"content"},[t._t("list")])])])},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this;return t.editing?t._h("ul",{staticClass:"editing lyrics"},[t._l(t.runner.lrc.lyrics,function(e,n){return t._h("li",{class:{cur:n==t.index},attrs:{title:e.timestamp},on:{dblclick:function(e){t.edit(n)},contextmenu:function(e){e.preventDefault(),t.editMenu(n)}}},[t.editingIndex==n?[t._h("input",{directives:[{name:"model",rawName:"v-model",value:e.timestamp,expression:"lyric.timestamp"}],staticClass:"timestamp",attrs:{type:"text"},domProps:{value:t._s(e.timestamp)},on:{keydown:function(e){13===e.keyCode&&t.exitEdit(e)},input:function(t){t.target.composing||(e.timestamp=t.target.value)}}})," ",t._h("input",{directives:[{name:"model",rawName:"v-model",value:e.content,expression:"lyric.content"}],staticClass:"content",attrs:{type:"text"},domProps:{value:t._s(e.content)},on:{keydown:function(e){13===e.keyCode&&t.exitEdit(e)},input:function(t){t.target.composing||(e.content=t.target.value)}}})]:[t._h("div",{staticClass:"timestamp"},[t._s(t._f("time")(e.timestamp))])," ",t._h("div",{staticClass:"content"},[t._s(e.content)])," ",t._h("div",{staticClass:"icon-btn conceal"},[t._h("tmenu",[t._h("div",{slot:"target"},[t._h("i",{staticClass:"icon-ellipsis-vert"})])," ",t._h("ul",{slot:"list"},[t._h("li",{on:{click:function(e){t.removeTimestamp(n)}}},[t._h("i",{staticClass:"icon-cancel"})," "+t._s(t.$t("lyric_editor.remove_timestamp"))+"\n            "])," ",t._h("li",{on:{click:function(e){t.edit(n)}}},[t._h("i",{staticClass:"icon-edit"})," "+t._s(t.$t("lyric_editor.edit"))+"\n            "])," ",t._h("li",{on:{click:function(e){t.insert(n)}}},[t._h("i",{staticClass:"icon-plus"})," "+t._s(t.$t("lyric_editor.add"))+"\n            "])," ",t._h("li",{on:{click:function(e){t.remove(n)}}},[t._h("i",{staticClass:"icon-trash"})," "+t._s(t.$t("lyric_editor.remove"))+"\n            "])])])])]," "])})," ",t.lyricArray.length?t._h("li",{staticClass:"division"},[t._s(t.$t("lyric_editor.following_unsorted"))]):t._e()," ",t._l(t.lyricArray,function(e,n){return t._h("li",{staticClass:"unsorted",attrs:{"track-by":"i"},on:{dblclick:function(e){t.editText(n)},contextmenu:function(e){e.preventDefault(),t.editMenu(n)}}},[t.editingTextIndex==n?[t._h("input",{directives:[{name:"model",rawName:"v-model",value:t.lyricArray[n],expression:"lyricArray[i]"}],staticClass:"content",attrs:{type:"text"},domProps:{value:t._s(t.lyricArray[n])},on:{keydown:function(e){13===e.keyCode&&t.exitEdit(e)},input:function(e){if(!e.target.composing){var r=t.lyricArray,i=n;Array.isArray(r)?r.splice(i,1,e.target.value):t.lyricArray[n]=e.target.value}}}})]:[t._h("div",{staticClass:"content"},[t._s(e)])," ",t._h("div",{staticClass:"icon-btn conceal"},[t._h("tmenu",[t._h("div",{slot:"target"},[t._h("i",{staticClass:"icon-ellipsis-vert"})])," ",t._h("ul",{slot:"list"},[t._h("li",{on:{click:function(e){t.editText(n)}}},[t._h("i",{staticClass:"icon-edit"})," "+t._s(t.$t("lyric_editor.edit"))+"\n            "])," ",t._h("li",{on:{click:function(e){t.insertText(n)}}},[t._h("i",{staticClass:"icon-plus"})," "+t._s(t.$t("lyric_editor.add"))+"\n            "])," ",t._h("li",{on:{click:function(e){t.removeText(n)}}},[t._h("i",{staticClass:"icon-trash"})," "+t._s(t.$t("lyric_editor.remove"))+"\n            "])])])])]," "])})]):t._h("ul",{staticClass:"lyrics"},[t._l(t.runner.lrc.lyrics,function(e,n){return t._h("li",{class:{cur:n==t.index},attrs:{title:e.timestamp},on:{click:function(n){t.playto(e.timestamp)}}},["\n    "+t._s(e.content)+"\n  "])})," ",t.lyricArray.length?t._h("li",{staticClass:"division"},[t._s(t.$t("lyric_editor.following_unsorted"))]):t._e()," ",t._l(t.lyricArray,function(e,n){return t._h("li",{staticClass:"unsorted",attrs:{"track-by":"i"}},["\n    "+t._s(e)+"\n  "])})])},staticRenderFns:[]}},function(t,e,n){var r,i;n(74),n(76),r=n(78);var o=n(94);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-a14c96ea",t.exports=r},function(t,e,n){var r=n(75);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".modal .footer .btn-group[data-v-a14c96ea]:after,.modal .header[data-v-a14c96ea]:after{content:' ';display:table;clear:both}.cover[data-v-a14c96ea]{position:fixed;top:0;left:0;background-color:rgba(0,0,0,.7);width:100%;height:100%;z-index:1000;overflow:auto}.modal[data-v-a14c96ea]{position:relative;margin:30px auto;background:#fff;border-radius:8px;overflow:hidden}.modal.lg[data-v-a14c96ea]{width:50%}.modal.md[data-v-a14c96ea]{width:70%}.modal.sm[data-v-a14c96ea]{width:90%}.modal .body[data-v-a14c96ea],.modal .footer[data-v-a14c96ea],.modal .header[data-v-a14c96ea]{padding-left:14px;padding-right:14px}.modal .body[data-v-a14c96ea],.modal .header[data-v-a14c96ea]{padding-top:14px;padding-bottom:14px}.modal .footer[data-v-a14c96ea],.modal .header[data-v-a14c96ea]{color:#1161b3}.modal .header[data-v-a14c96ea]{border-bottom:1px solid #e5e5e5;font-weight:bolder}.modal .header .icon-cancel[data-v-a14c96ea]{float:right;cursor:pointer}.modal .footer[data-v-a14c96ea]{border-top:1px solid #e5e5e5}.modal .footer .btn-group .btn[data-v-a14c96ea]{float:right;border-radius:0;background-color:transparent;color:#1161b3;padding:8px 10px}.modal .footer .btn-group .btn[data-v-a14c96ea]:hover{background-color:rgba(0,0,0,.1)}",""])},function(t,e,n){var r=n(77);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".modal h3{margin:10px 0}.modal textarea{width:100%;border:1px solid #d6d6d6;border-radius:5px;min-height:300px;margin:10px 0}.modal p{margin:0}",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=n(1),a=r(o),s=n(28),u=n(79),c=r(u),l=n(85),f=r(l),d=n(88),p=r(d),h=n(91),v=r(h),m={help:c.default,"lrc-format-upload":f.default,"lyric-upload":p.default,"lrc-save":v.default};window.MC=[],e.default={data:function(){return{title:"Modal",size:"md",confirm:!1,modalName:"",modalComponent:null,isShow:!1,coverShow:!1}},methods:{show:function(t){var e=this;return this.isShow=!0,this.coverShow=!0,this.$nextTick(function(){e.modalName=t,e.modalComponent=new a.default(i({},m[e.modalName])),e.modalComponent.$mount(e.$refs.modalWrapper),e.modalComponent.title&&(e.title=e.modalComponent.title),e.modalComponent.size&&(e.title=e.modalComponent.size),e.modalComponent.confirm&&(e.confirm=e.modalComponent.confirm)}),this},ok:function(){this.isShow=!1,this.modalComponent.$emit("ok"),this.modalComponent.$destroy()},cancel:function(){this.isShow=!1,this.modalComponent.$emit("cancel"),this.modalComponent.$destroy()}},mounted:function(){var t=this;s.globalKeydown.on("escape",function(){t.isShow&&t.cancel()})},components:{Help:c.default,LrcFormatUpload:f.default,LyricUpload:p.default,LrcSave:v.default}}},function(t,e,n){var r,i;n(80),r=n(82);var o=n(84);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-3f57c1d0",t.exports=r},function(t,e,n){var r=n(81);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".help[data-v-3f57c1d0]{color:#333}.help a[data-v-3f57c1d0],.help h3[data-v-3f57c1d0],.help h4[data-v-3f57c1d0]{color:#1161b3}.help h3[data-v-3f57c1d0]{margin:5px 0}.help h4[data-v-3f57c1d0]{margin:0}.help a[data-v-3f57c1d0]{font-weight:bolder}.help ul[data-v-3f57c1d0]{list-style-type:none;padding:0 0 0 20px}",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(83),o=r(i);e.default={data:function(){return{PKG:o.default,title:this.$t("modal.help.title")}}}},function(t,e){t.exports={name:"lrc-maker",version:"0.2.2",description:"lrc maker",main:"index.js",scripts:{test:"yarn run lint",lint:"eslint --ext js,vue webpack.config.js src",dev:"webpack-dev-server --host='0.0.0.0' --progress --colors --inline --hot --output-public-path='/assets/'",build:"yarn run build:clean && yarn run build:webpack && yarn run build:view","build:clean":"rm -rf build","build:view":" cp index.html build/index.html","build:webpack":"webpack --optimize-minimize --output-public-path='./assets/'",deploy:"yarn run build && gh-pages -d build"},keywords:["lrc"],author:"Weirong Xu <weirongxu.raidou@gmail.com>",homepage:"https://github.com/weirongxu/lrc-maker",repository:{type:"git",url:"https://github.com/weirongxu/lrc-maker.git"},onlinePage:"https://weirongxu.github.io/lrc-maker/",bugs:"https://github.com/weirongxu/lrc-maker/issues",license:"MIT",devDependencies:{autoprefixer:"^6.5.3","babel-core":"^6.7.6","babel-eslint":"^7.1.1","babel-helper-vue-jsx-merge-props":"^2.0.2","babel-loader":"^6.2.8","babel-plugin-syntax-jsx":"^6.18.0","babel-plugin-transform-vue-jsx":"^3.2.0","babel-preset-latest":"^6.16.0","babel-preset-stage-0":"^6.16.0","css-loader":"^0.26.0",eslint:"^3.10.2","eslint-loader":"^1.3.0","eslint-plugin-html":"^1.7.0","file-loader":"^0.9.0","gh-pages":"^0.12.0","json-loader":"^0.5.4","node-sass":"^3.13.0","resolve-url-loader":"^1.6.0","sass-loader":"^4.0.2","url-loader":"^0.5.7","vue-loader":"^10.0.1","vue-template-compiler":"^2.1.3",webpack:"^1.12.15","webpack-dev-server":"^1.14.1","yaml-loader":"^0.4.0"},dependencies:{clone:"^2.1.0",eventemitter2:"^2.2.1",extend:"^3.0.0","filesaver.js":"^0.2.0","lrc-kit":"^0.2.0",unidragger:"^2.1.0",vue:"^2.1.3","vue-i18n":"^4.7.3"}}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{staticClass:"help"},[t._h("h3",[t._s(t.$t("modal.help.shortcut_key"))])," ",t._h("h4",[t._s(t.$t("modal.help.play_control.title"))])," ",t._h("ul",[t._h("li",[t._h("strong",[t._s(t.$t("modal.help.play_control.left_key"))+":"])," "+t._s(t.$t("modal.help.play_control.backward"))])," ",t._h("li",[t._h("strong",[t._s(t.$t("modal.help.play_control.right_key"))+":"])," "+t._s(t.$t("modal.help.play_control.forward"))])])," ",t._h("h4",[t._s(t.$t("modal.help.make_lrc.title"))])," ",t._h("ul",[t._h("li",[t._h("strong",[t._s(t.$t("modal.help.make_lrc.up_key"))+":"])," "+t._s(t.$t("modal.help.make_lrc.prev_lyric"))])," ",t._h("li",[t._h("strong",[t._s(t.$t("modal.help.make_lrc.down_key"))+":"])," "+t._s(t.$t("modal.help.make_lrc.next_lyric"))])])," ",t._h("div",{staticClass:"link"},[t._h("a",{attrs:{href:t.PKG.homepage,target:"_blank"}},[t._s(t.$t("modal.help.source_code"))+": github"])])])},staticRenderFns:[]}},function(t,e,n){var r,i;r=n(86);var o=n(87);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,t.exports=r},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(15),o=r(i);e.default={data:function(){return{title:this.$t("modal.lrc_format_upload.title"),lyric:"",confirm:!0}},created:function(){var t=this;this.lyric=$App.lrcFormat,this.$on("ok",function(){$App.lrcFormat=t.lyric})},methods:{upload:function(t){this.lyric=t}},components:{Upload:o.default}}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",[t._h("p",[t._s(t.$t("modal.lrc_format_upload.description"))])," ",t._h("textarea",{directives:[{name:"model",rawName:"v-model",value:t.lyric,expression:"lyric"}],domProps:{value:t._s(t.lyric)},on:{input:function(e){e.target.composing||(t.lyric=e.target.value)}}})," ",t._h("upload",{staticClass:"btn",on:{uploaded:t.upload}},[t._s(t.$t("modal.lrc_format_upload.upload"))])])},staticRenderFns:[]}},function(t,e,n){var r,i;r=n(89);var o=n(90);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,t.exports=r},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(15),o=r(i),a=n(48),s=r(a);e.default={data:function(){return{title:this.$t("modal.lyric_upload.title"),lyric:s.default.lyric,confirm:!0}},created:function(){var t=this;this.$on("ok",function(){$App.lyricArray=t.lyric.split(/\r\n|[\n\r]/g)})},methods:{upload:function(t){this.lyric=t}},watch:{lyric:function(t){s.default.lyric=t}},components:{Upload:o.default}}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",[t._h("p",[t._s(t.$t("modal.lyric_upload.description"))])," ",t._h("textarea",{directives:[{name:"model",rawName:"v-model",value:t.lyric,expression:"lyric"}],domProps:{value:t._s(t.lyric)},on:{input:function(e){e.target.composing||(t.lyric=e.target.value)}}})," ",t._h("upload",{staticClass:"btn",on:{uploaded:t.upload}},[t._s(t.$t("modal.lyric_upload.upload"))])])},staticRenderFns:[]}},function(t,e,n){var r,i;r=n(92);var o=n(93);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,t.exports=r},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(28),o=n(48),a=r(o),s=n(83),u=r(s);e.default={data:function(){return{title:this.$t("modal.lrc_format_save.title"),lyric:"",userName:a.default.userName,saveOptions:{combine:!0,lineFormat:"\r\n",sort:!0},infoFields:[{key:"ti",label:this.$t("modal.lrc_format_save.fields.song_title")},{key:"ar",label:this.$t("modal.lrc_format_save.fields.artist")},{key:"al",label:this.$t("modal.lrc_format_save.fields.album")},{key:"au",label:this.$t("modal.lrc_format_save.fields.songtext_creator")}],info:{}}},mounted:function(){var t=this;this.runner=$App.runner;var e=$App.$refs.player,n={};this.infoFields.forEach(function(e){e.key in t.runner.lrc.info?n[e.key]=t.runner.lrc.info[e.key]:n[e.key]=""}),e.duration&&(n.length=(0,i.timestamp2timestr)(e.duration)),this.userName&&(n.by=this.userName),n.re=u.default.name+" ("+u.default.onlinePage+")",n.ve=u.default.version,this.info=n,this.lyricUpdate()},methods:{save:function(){(0,i.saveLrc)(this.runner.lrc.toString(this.saveOptions),this.runner.lrc.info.ti||"lyric")},infoUpdate:function(){for(var t in this.info)0!==this.info[t].length?this.runner.lrc.info[t]=this.info[t]:delete this.runner.lrc.info[t];this.lyricUpdate()},lyricUpdate:function(){this.lyric=this.runner.lrc.toString(this.saveOptions)}},watch:{userName:function(t){this.$set(this.info,"by",t),a.default.userName=t},lyric:function(){$App.lrcFormat=this.lyric},saveOptions:{deep:!0,handler:function(){this.lyricUpdate()}},info:{deep:!0,handler:function(){console.log("info"),this.infoUpdate()}}}}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",[t._h("h3",[t._s(t.$t("modal.lrc_format_save.info_title"))])," ",t._l(t.infoFields,function(e){return e.label?t._h("div",{staticClass:"form-group"},[t._h("label",{attrs:{for:"info-"+e.key},domProps:{textContent:t._s(e.label)}})," ",t._h("input",{directives:[{name:"model",rawName:"v-model",value:t.info[e.key],expression:"info[field.key]"}],attrs:{id:"info-"+e.key,type:"text"},domProps:{value:t._s(t.info[e.key])},on:{input:function(n){if(!n.target.composing){var r=t.info,i=e.key;Array.isArray(r)?r.splice(i,1,n.target.value):t.info[e.key]=n.target.value}}}})]):t._e()})," ",t._h("div",{staticClass:"form-group"},[t._h("label",{attrs:{for:"info-by"}},[t._s(t.$t("modal.lrc_format_save.fields.lrc_creator"))])," ",t._h("input",{directives:[{name:"model",rawName:"v-model",value:t.userName,expression:"userName"}],attrs:{id:"info-by",type:"text"},domProps:{value:t._s(t.userName)},on:{input:function(e){e.target.composing||(t.userName=e.target.value)}}})])," ",t._h("h3",[t._s(t.$t("modal.lrc_format_save.save_title"))])," ",t._h("textarea",[t._s(t.lyric)])," ",t._h("label",["\n    "+t._s(t.$t("modal.lrc_format_save.combine"))+"\n    ",t._h("input",{directives:[{name:"model",rawName:"v-model",value:t.saveOptions.combine,expression:"saveOptions.combine"}],attrs:{type:"checkbox"},domProps:{checked:Array.isArray(t.saveOptions.combine)?t._i(t.saveOptions.combine,null)>-1:t._q(t.saveOptions.combine,!0)},on:{change:function(e){var n=t.saveOptions.combine,r=e.target,i=!!r.checked;if(Array.isArray(n)){var o=null,a=t._i(n,o);i?a<0&&(t.saveOptions.combine=n.concat(o)):a>-1&&(t.saveOptions.combine=n.slice(0,a).concat(n.slice(a+1)))}else t.saveOptions.combine=i}}})])," ",t._h("div",{staticClass:"btn",on:{click:t.save}},[t._h("i",{staticClass:"icon-download"})," "+t._s(t.$t("modal.lrc_format_save.download"))+"\n  "])])},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{class:{cover:t.coverShow},on:{click:t.cancel}},[t._h("transition",{attrs:{name:"modal"},on:{"after-leave":function(e){t.coverShow=!1}}},[t.isShow?t._h("div",{staticClass:"modal",class:[t.size],on:{click:function(t){t.stopPropagation()}}},[t._h("div",{staticClass:"header"},["\n        "+t._s(t.title)+"\n        ",t._h("i",{staticClass:"icon-cancel",on:{click:t.cancel}})])," ",t._h("div",{staticClass:"body"},[t._h("div",{ref:"modalWrapper"})])," ",t._h("div",{staticClass:"footer"},[t.confirm?t._h("div",{staticClass:"btn-group"},[t._h("div",{staticClass:"btn",on:{click:t.ok}},[t._s(t.$t("modal.button.ok"))])," ",t._h("div",{staticClass:"btn",on:{click:t.cancel}},[t._s(t.$t("modal.button.cancel"))])]):t._e()])]):t._e()])])},staticRenderFns:[]}},function(t,e,n){var r,i;n(96),n(98),r=n(100);var o=n(101);i=r=r||{},"object"!=typeof r.default&&"function"!=typeof r.default||(i=r=r.default),"function"==typeof i&&(i=i.options),i.render=o.render,i.staticRenderFns=o.staticRenderFns,i._scopeId="data-v-51eac06b",t.exports=r},function(t,e,n){var r=n(97);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".target[data-v-51eac06b]{position:relative;display:block;margin:-8px;padding:8px}",""])},function(t,e,n){var r=n(99);"string"==typeof r&&(r=[[t.id,r,""]]);n(13)(r,{});r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(),e.push([t.id,".nav-menu .wrap{position:absolute;z-index:100;box-shadow:4px 4px 3px -2px #ccc}.nav-menu .wrap ul{list-style-type:none;padding:0;margin:0;background-color:#0d4884}.nav-menu .wrap ul li{padding:0 5px;cursor:pointer;line-height:30px;font-size:12px}.nav-menu .wrap ul li:hover{background-color:#082f56}",""])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(28);e.default={data:function(){return{dir:!1,style:{top:0,left:0},show:!1}},props:{enterDelay:{type:Number,default:.1},leaveDelay:{type:Number,default:.5}},mounted:function(){var t=this,e=this.$refs.menu,n=new r.DelayHover(e,{enterDelay:this.enterDelay,leaveDelay:this.leaveDelay});n.hover(function(){t.show=!0},function(){t.show=!1});var i=this.$el;this.style.top=i.style.clientHeight}}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{ref:"menu",staticClass:"nav-menu"},[t._h("span",{staticClass:"target"},[t._t("target")])," ",t._h("div",{directives:[{name:"show",rawName:"v-show",value:t.show,expression:"show"}],staticClass:"wrap",style:t.style},[t._t("list")])])},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this;return t._h("div",{staticClass:"app"},[t._h("header",[t._h("div",{staticClass:"left"},[t._h("nav-menu",{staticClass:"menu-item",attrs:{title:t.$t("button.upload")}},[t._h("div",{slot:"target"},[t._h("i",{staticClass:"icon-upload"})])," ",t._h("ul",{slot:"list"},[t._h("li",{on:{click:function(e){t.$refs.modals.show("lrc-format-upload")}}},[t._h("i",{staticClass:"icon-upload"})," "+t._s(t.$t("menu.upload.lrc"))+"\n          "])," ",t._h("li",{on:{click:function(e){t.$refs.modals.show("lyric-upload")}}},[t._h("i",{staticClass:"icon-upload"})," "+t._s(t.$t("menu.upload.lyric"))+"\n          "])," ",t._h("li",[t._h("upload",{attrs:{accept:"audio/*","read-format":"DataURL"},on:{uploaded:t.uploadMusic}},[t._s(t.$t("menu.upload.music"))])])])])," ",t._h("div",{staticClass:"menu-item",attrs:{title:t.$t("button.save")},on:{click:function(e){t.$refs.modals.show("lrc-save")}}},[t._h("i",{staticClass:"icon-save"})])])," ",t._h("div",{staticClass:"right"},[t._h("div",{staticClass:"menu-item",attrs:{title:t.editing?t.$t("button.close_edit"):t.$t("button.open_edit")},on:{click:function(e){t.editing=!t.editing}}},[t.editing?[t._h("i",{staticClass:"icon-cancel"})]:[t._h("i",{staticClass:"icon-edit"})]," "])," ",t._h("div",{staticClass:"menu-item",attrs:{title:t.$t("button.help")},on:{click:function(e){t.$refs.modals.show("help")}}},[t._h("i",{staticClass:"icon-help-circled"})])])])," ",t._h("player",{ref:"player",attrs:{src:t.musicUrl},on:{timeupdate:t.timeupdate}})," ",t._h("lyric-editor",{ref:"lyric",staticClass:"lyric-editor",attrs:{editing:t.editing,runner:t.runner,"lyric-array":t.lyricArray,playto:t.playto}},["\n    lyric editor\n  "])," ",t._h("footer",[t._h("div",{staticClass:"left"},[t._h("div",{staticClass:"menu-item",on:{click:t.removeLyric}},[t._h("i",{staticClass:"icon-trash"})," "+t._s(t.$t("button.remove_lyric"))+"\n      "])])," ",t.editing?t._h("div",{staticClass:"right"},[t._h("div",{staticClass:"menu-item",attrs:{title:"[UP]"},on:{click:function(e){t.$refs.lyric.$emit("prevlyric")}}},[t._s(t.$t("button.prev_lyric"))])," ",t._h("div",{
staticClass:"menu-item",attrs:{title:"[DOWN]"},on:{click:function(e){t.$refs.lyric.$emit("nextlyric")}}},[t._s(t.$t("button.next_lyric"))])]):t._e()])," ",t._h("modals",{ref:"modals"})])},staticRenderFns:[]}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=n(1),o=r(i),a=n(104),s=r(a),u=n(105),c=r(u),l=(navigator.language||navigator.userLanguage||"en").toLocaleLowerCase();l in c.default||l.indexOf("-")>=0&&(l=l.split("-")[0]),o.default.use(s.default),o.default.config.lang=l,o.default.locale(l,c.default[l])},function(t,e,n){(function(e){/*!
	 * vue-i18n v4.7.3
	 * (c) 2016 kazuya kawaguchi
	 * Released under the MIT License.
	 */
"use strict";function n(t,e){window.console&&(console.warn("[vue-i18n] "+t),e&&console.warn(e.stack))}function r(t,e){t.locale=function(t,r,o){return void 0===r?e.locales[t]:void(null===r?(e.locales[t]=void 0,delete e.locales[t]):i(t,r,function(r){r?e.locales[t]=r:n("failed set `"+t+"` locale"),o&&o()}))}}function i(t,e,n){var r=this;"object"===("undefined"==typeof e?"undefined":x.typeof(e))?n(e):!function(){var t=e.call(r);"function"==typeof t?t.resolved?n(t.resolved):t.requested?t.pendingCallbacks.push(n):!function(){t.requested=!0;var e=t.pendingCallbacks=[n];t(function(n){t.resolved=n;for(var r=0,i=e.length;r<i;r++)e[r](n)},function(){n()})}():o(t)&&t.then(function(t){n(t)},function(){n()}).catch(function(t){console.error(t),n()})}()}function o(t){return t&&"function"==typeof t.then}function a(t,e,n){function r(t){if(n>1)t.$forceUpdate();else for(var e=t._watchers.length;e--;)t._watchers[e].update(!0)}var i=t.prototype._init;t.prototype._init=function(t){var n=this;i.call(this,t),this.$parent||(this.$lang=e,this._langUnwatch=this.$lang.$watch("$data",function(t,e){r(n)},{deep:!0}))};var o=t.prototype._destroy;t.prototype._destroy=function(){!this.$parent&&this._langUnwatch&&(this._langUnwatch(),this._langUnwatch=null,this.$lang=null),o.apply(this,arguments)}}function s(t){if(!E){var e=t.$watch("__watcher__",function(t){});E=t._watchers[0].constructor,e()}return E}function u(t){return!k&&t&&t._data&&t._data.__ob__&&t._data.__ob__.dep&&(k=t._data.__ob__.dep.constructor),k}function c(t,e,n){function r(t,e){var n=new o(e,t,null,{lazy:!0});return function(){return n.dirty&&n.evaluate(),a&&a.target&&n.depend(),n.value}}var i=t.util.bind,o=s(e),a=u(e);Object.defineProperty(t.config,"lang",{enumerable:!0,configurable:!0,get:r(function(){return e.lang},e),set:i(function(t){e.lang=t},e)}),A=n,Object.defineProperty(t.config,"fallbackLang",{enumerable:!0,configurable:!0,get:function(){return A},set:function(t){A=t}}),Object.defineProperty(t.config,"missingHandler",{enumerable:!0,configurable:!0,get:function(){return O},set:function(t){O=t}}),Object.defineProperty(t.config,"i18nFormatter",{enumerable:!0,configurable:!0,get:function(){return C},set:function(t){C=t}})}function l(t){return null===t||void 0===t}function f(t){function e(t){for(var e=arguments.length,r=Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];return r=1===r.length&&"object"===x.typeof(r[0])?r[0]:{},r&&r.hasOwnProperty||(r={}),t.replace(D,function(e,i,o,a){var s=void 0;return"{"===t[a-1]&&"}"===t[a+e.length]?o:(s=n(r,o)?r[o]:e,l(s)?"":s)})}var n=t.util.hasOwn;return e}function d(t){return Y.test(t)}function p(t){var e=t.charCodeAt(0),n=t.charCodeAt(t.length-1);return e!==n||34!==e&&39!==e?t:t.slice(1,-1)}function h(t){if(void 0===t)return"eof";var e=t.charCodeAt(0);switch(e){case 91:case 93:case 46:case 34:case 39:case 48:return t;case 95:case 36:case 45:return"ident";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return e>=97&&e<=122||e>=65&&e<=90?"ident":e>=49&&e<=57?"number":"else"}function v(t){var e=t.trim();return("0"!==t.charAt(0)||!isNaN(t))&&(d(e)?p(e):"*"+e)}function m(t){function e(){var e=t[r+1];if(i===M&&"'"===e||i===U&&'"'===e)return r++,s="\\"+e,p[$](),!0}var n=[],r=-1,i=N,o=0,a=void 0,s=void 0,u=void 0,c=void 0,l=void 0,f=void 0,d=void 0,p=[];for(p[F]=function(){void 0!==u&&(n.push(u),u=void 0)},p[$]=function(){void 0===u?u=s:u+=s},p[P]=function(){p[$](),o++},p[S]=function(){if(o>0)o--,i=I,p[$]();else{if(o=0,u=v(u),u===!1)return!1;p[F]()}};null!=i;)if(r++,a=t[r],"\\"!==a||!e()){if(c=h(a),d=z[i],l=d[c]||d.else||V,l===V)return;if(i=l[0],f=p[l[1]],f&&(s=l[2],s=void 0===s?a:s,f()===!1))return;if(i===B)return n.raw=t,n}}function y(t){var e=T[t];return e||(e=m(t),e&&(T[t]=e)),e}function g(t){function e(t){if(null===t||void 0===t)return!0;if(Array.isArray(t)){if(t.length>0)return!1;if(0===t.length)return!0}else if(o(t))for(var e in t)if(a(t,e))return!1;return!0}function n(t,n){if(!i(t))return null;var r=y(n);if(e(r))return null;for(var o=r.length,a=null,s=t,u=0;u<o;){var c=s[r[u]];if(void 0===c){s=null;break}s=c,u++}return a=s}var r=t.util,i=r.isObject,o=r.isPlainObject,a=r.hasOwn;return n}function _(t){function r(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=t.config.lang,o=t.config.fallbackLang;return 1===n.length?v(n[0])||Array.isArray(n[0])?n=n[0]:"string"==typeof n[0]&&(i=n[0]):2===n.length&&("string"==typeof n[0]&&(i=n[0]),(v(n[1])||Array.isArray(n[1]))&&(n=n[1])),{lang:i,fallback:o,params:n}}function i(e,n,r){if(!e)return null;var o=_(e,n);if(Array.isArray(o))return o;if(l(o)&&(o=e[n]),l(o))return null;if(o.indexOf("@:")>=0){var a=o.match(/(@:[\w|.]+)/g);for(var s in a){var u=a[s],c=u.substr(2),f=i(e,c,r);o=o.replace(u,f)}}return r?t.config.i18nFormatter?t.config.i18nFormatter.apply(null,[o].concat(r)):y(o,r):o}function o(t,r,o,a,s){var u=null;return u=i(t(r),a,s),l(u)?(u=i(t(o),a,s),l(u)?null:("production"!==e.env.NODE_ENV&&n('Fall back to translate the keypath "'+a+'" with "'+o+'" language.'),u)):u}function a(r,i,o,a){return l(a)?("production"!==e.env.NODE_ENV&&n('Cannot translate the value of keypath "'+i+'". Use the value of keypath as default'),t.config.missingHandler&&t.config.missingHandler.apply(null,[r,i,o]),i):a}function s(e){return t.locale(e)}function u(t){return this.$options.locales[t]}function c(t){return t?t>1?1:0:1}function d(t,e){return t=Math.abs(t),2===e?c(t):t?Math.min(t,2):0}function p(t,e){if(!t&&"string"!=typeof t)return null;var n=t.split("|");return e=d(e,n.length),n[e]?n[e].trim():t}var h=t.util,v=h.isObject,m=h.bind,y=f(t),_=g(t);return t.t=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];if(!t)return"";var u=r.apply(void 0,n),c=u.lang,l=u.fallback,f=u.params;return a(c,t,null,o(s,c,l,t,f))},t.tc=function(e,n){for(var r=arguments.length,i=Array(r>2?r-2:0),o=2;o<r;o++)i[o-2]=arguments[o];return p(t.t.apply(t,[e].concat(i)),n)},t.prototype.$t=function(t){if(!t)return"";for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];var c=r.apply(void 0,n),l=c.lang,f=c.fallback,d=c.params,p=null;return this.$options.locales&&(p=o(m(u,this),l,f,t,d))?p:a(l,t,this,o(s,l,f,t,d))},t.prototype.$tc=function(t,e){if("number"!=typeof e&&"undefined"!=typeof e)return t;for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return p(this.$t.apply(this,[t].concat(r)),e)},t}function b(t){var i=(arguments.length<=1||void 0===arguments[1]?{}:arguments[1],t.version&&Number(t.version.split(".")[0])||-1);if("production"!==e.env.NODE_ENV&&b.installed)return void n("already installed.");if("production"!==e.env.NODE_ENV&&i<1)return void n("vue-i18n ("+b.version+") need to use vue version 1.0 or later (vue version: "+t.version+").");var o="en";w(t,o),r(t,H),a(t,H,i),c(t,H,o),_(t)}function w(t,e){var n=t.config.silent;t.config.silent=!0,H||(H=new t({data:{lang:e,locales:{}}})),t.config.silent=n}var x={};x.typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};var E=void 0,k=void 0,A=void 0,O=null,C=null,D=/(%|)\{([0-9a-zA-Z_]+)\}/g,T=Object.create(null),$=0,F=1,P=2,S=3,N=0,j=1,R=2,L=3,I=4,M=5,U=6,B=7,V=8,z=[];z[N]={ws:[N],ident:[L,$],"[":[I],eof:[B]},z[j]={ws:[j],".":[R],"[":[I],eof:[B]},z[R]={ws:[R],ident:[L,$]},z[L]={ident:[L,$],0:[L,$],number:[L,$],ws:[j,F],".":[R,F],"[":[I,F],eof:[B,F]},z[I]={"'":[M,$],'"':[U,$],"[":[I,P],"]":[j,S],eof:V,else:[I,$]},z[M]={"'":[I,$],eof:V,else:[M,$]},z[U]={'"':[I,$],eof:V,else:[U,$]};var Y=/^\s?(true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/,H=void 0;b.version="4.7.3","undefined"!=typeof window&&window.Vue&&window.Vue.use(b),t.exports=b}).call(e,n(2))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={};["en","zh"].forEach(function(t){r[t]=n(106)("./"+t)}),e.default=r},function(t,e,n){function r(t){return n(i(t))}function i(t){return o[t]||function(){throw new Error("Cannot find module '"+t+"'.")}()}var o={"./en":107,"./en.yml":107,"./index":105,"./index.js":105,"./zh":108,"./zh.yml":108};r.keys=function(){return Object.keys(o)},r.resolve=i,t.exports=r,r.id=106},function(t,e){t.exports={button:{upload:"upload",save:"save",close_edit:"close edit",open_edit:"open edit",help:"help",lrc_info:"info",remove_lyric:"remove lyric",prev_lyric:"prev lyric",next_lyric:"next lyric"},menu:{upload:{lrc:"LRC format lyric",lyric:"lyric text",music:"music"}},modal:{lrc_format_save:{title:"Lyrics Save",info_title:"Lyrics Info",fields:{song_title:"Sone Title",artist:"Artist",album:"Album",songtext_creator:"Songtext Creator",lrc_creator:"LRC Creator"},save_title:"Lyrics",combine:"combine lyrics",download:"lyrics file download"},lrc_format_upload:{title:"Upload LRC Format",description:"Upload timestamped lyrics",upload:"Read from file"},lyric_upload:{title:"Upload Text Lyrics",description:"Plain Text lyrics, lyrics divided by a newline",upload:"Read from file"},help:{title:"Help",shortcut_key:"shortcut key",play_control:{title:"play control",left_key:"<Left>",right_key:"<Right>",backward:"backward",forward:"forward"},make_lrc:{title:"make lrc",up_key:"<Up>",down_key:"<Down>",prev_lyric:"prev lyric",next_lyric:"next lyric"},source_code:"source code"},button:{ok:"ok",cancel:"cancel"}},lyric_editor:{edit:"edit",add:"add",remove:"remove",remove_timestamp:"remove timestamp",play_to_this_lyric:"play to this lyric",following_unsorted:"The following unsorted"}}},function(t,e){t.exports={button:{upload:"上传",save:"保存",close_edit:"关闭编辑",open_edit:"打开编辑",help:"帮助",lrc_info:"信息",remove_lyric:"清除歌词",prev_lyric:"上一条歌词",next_lyric:"下一条歌词"},menu:{upload:{lrc:"LRC格式歌词",lyric:"歌词文本",music:"音乐"}},modal:{lrc_format_save:{title:"保存歌词",info_title:"歌词信息",fields:{song_title:"歌名",artist:"艺术家",album:"专辑",songtext_creator:"歌词作者",lrc_creator:"LRC 创建者"},save_title:"歌词",combine:"合并歌词",download:"下载歌词文件"},lrc_format_upload:{title:"上传LRC格式文本",description:"上传已经包含时间戳的歌词",upload:"从文件读取"},lyric_upload:{title:"上传歌词文本",description:"纯文本歌词，用换行对歌词划分",upload:"从文件读取"},help:{title:"帮助",shortcut_key:"快捷键",play_control:{title:"播放控制",left_key:"<Left>",right_key:"<Right>",backward:"后退",forward:"前进"},make_lrc:{title:"制作歌词",up_key:"<Up>",down_key:"<Down>",prev_lyric:"上一条歌词",next_lyric:"下一条歌词"},source_code:"源码"},button:{ok:"确认",cancel:"取消"}},lyric_editor:{edit:"编辑",add:"添加",remove:"删除",remove_timestamp:"删除时间轴",play_to_this_lyric:"播放到这条歌词",following_unsorted:"以下未排序"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,